// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gw/gw.proto

// Protobuf Java Version: 3.25.1
package io.chirpstack.api.gw;

/**
 * Protobuf enum {@code gw.TxAckStatus}
 */
public enum TxAckStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Ignored (when a previous item was already emitted).
   * </pre>
   *
   * <code>IGNORED = 0;</code>
   */
  IGNORED(0),
  /**
   * <pre>
   * Packet has been programmed for downlink.
   * </pre>
   *
   * <code>OK = 1;</code>
   */
  OK(1),
  /**
   * <pre>
   * Rejected because it was already too late to program this packet for
   * downlink.
   * </pre>
   *
   * <code>TOO_LATE = 2;</code>
   */
  TOO_LATE(2),
  /**
   * <pre>
   * Rejected because downlink packet timestamp is too much in advance.
   * </pre>
   *
   * <code>TOO_EARLY = 3;</code>
   */
  TOO_EARLY(3),
  /**
   * <pre>
   * Rejected because there was already a packet programmed in requested
   * timeframe.
   * </pre>
   *
   * <code>COLLISION_PACKET = 4;</code>
   */
  COLLISION_PACKET(4),
  /**
   * <pre>
   * Rejected because there was already a beacon planned in requested timeframe.
   * </pre>
   *
   * <code>COLLISION_BEACON = 5;</code>
   */
  COLLISION_BEACON(5),
  /**
   * <pre>
   * Rejected because requested frequency is not supported by TX RF chain.
   * </pre>
   *
   * <code>TX_FREQ = 6;</code>
   */
  TX_FREQ(6),
  /**
   * <pre>
   * Rejected because requested power is not supported by gateway.
   * </pre>
   *
   * <code>TX_POWER = 7;</code>
   */
  TX_POWER(7),
  /**
   * <pre>
   * Rejected because GPS is unlocked, so GPS timestamp cannot be used.
   * </pre>
   *
   * <code>GPS_UNLOCKED = 8;</code>
   */
  GPS_UNLOCKED(8),
  /**
   * <pre>
   * Downlink queue is full.
   * </pre>
   *
   * <code>QUEUE_FULL = 9;</code>
   */
  QUEUE_FULL(9),
  /**
   * <pre>
   * Internal error.
   * </pre>
   *
   * <code>INTERNAL_ERROR = 10;</code>
   */
  INTERNAL_ERROR(10),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Ignored (when a previous item was already emitted).
   * </pre>
   *
   * <code>IGNORED = 0;</code>
   */
  public static final int IGNORED_VALUE = 0;
  /**
   * <pre>
   * Packet has been programmed for downlink.
   * </pre>
   *
   * <code>OK = 1;</code>
   */
  public static final int OK_VALUE = 1;
  /**
   * <pre>
   * Rejected because it was already too late to program this packet for
   * downlink.
   * </pre>
   *
   * <code>TOO_LATE = 2;</code>
   */
  public static final int TOO_LATE_VALUE = 2;
  /**
   * <pre>
   * Rejected because downlink packet timestamp is too much in advance.
   * </pre>
   *
   * <code>TOO_EARLY = 3;</code>
   */
  public static final int TOO_EARLY_VALUE = 3;
  /**
   * <pre>
   * Rejected because there was already a packet programmed in requested
   * timeframe.
   * </pre>
   *
   * <code>COLLISION_PACKET = 4;</code>
   */
  public static final int COLLISION_PACKET_VALUE = 4;
  /**
   * <pre>
   * Rejected because there was already a beacon planned in requested timeframe.
   * </pre>
   *
   * <code>COLLISION_BEACON = 5;</code>
   */
  public static final int COLLISION_BEACON_VALUE = 5;
  /**
   * <pre>
   * Rejected because requested frequency is not supported by TX RF chain.
   * </pre>
   *
   * <code>TX_FREQ = 6;</code>
   */
  public static final int TX_FREQ_VALUE = 6;
  /**
   * <pre>
   * Rejected because requested power is not supported by gateway.
   * </pre>
   *
   * <code>TX_POWER = 7;</code>
   */
  public static final int TX_POWER_VALUE = 7;
  /**
   * <pre>
   * Rejected because GPS is unlocked, so GPS timestamp cannot be used.
   * </pre>
   *
   * <code>GPS_UNLOCKED = 8;</code>
   */
  public static final int GPS_UNLOCKED_VALUE = 8;
  /**
   * <pre>
   * Downlink queue is full.
   * </pre>
   *
   * <code>QUEUE_FULL = 9;</code>
   */
  public static final int QUEUE_FULL_VALUE = 9;
  /**
   * <pre>
   * Internal error.
   * </pre>
   *
   * <code>INTERNAL_ERROR = 10;</code>
   */
  public static final int INTERNAL_ERROR_VALUE = 10;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TxAckStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TxAckStatus forNumber(int value) {
    switch (value) {
      case 0: return IGNORED;
      case 1: return OK;
      case 2: return TOO_LATE;
      case 3: return TOO_EARLY;
      case 4: return COLLISION_PACKET;
      case 5: return COLLISION_BEACON;
      case 6: return TX_FREQ;
      case 7: return TX_POWER;
      case 8: return GPS_UNLOCKED;
      case 9: return QUEUE_FULL;
      case 10: return INTERNAL_ERROR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TxAckStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TxAckStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TxAckStatus>() {
          public TxAckStatus findValueByNumber(int number) {
            return TxAckStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.chirpstack.api.gw.GatewayProto.getDescriptor().getEnumTypes().get(4);
  }

  private static final TxAckStatus[] VALUES = values();

  public static TxAckStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TxAckStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:gw.TxAckStatus)
}

