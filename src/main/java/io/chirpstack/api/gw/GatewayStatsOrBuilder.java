// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gw/gw.proto

package io.chirpstack.api.gw;

public interface GatewayStatsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:gw.GatewayStats)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Gateway ID.
   * Deprecated: use gateway_id.
   * </pre>
   *
   * <code>bytes gateway_id_legacy = 1;</code>
   * @return The gatewayIdLegacy.
   */
  com.google.protobuf.ByteString getGatewayIdLegacy();

  /**
   * <pre>
   * Gateway ID.
   * </pre>
   *
   * <code>string gateway_id = 17;</code>
   * @return The gatewayId.
   */
  java.lang.String getGatewayId();
  /**
   * <pre>
   * Gateway ID.
   * </pre>
   *
   * <code>string gateway_id = 17;</code>
   * @return The bytes for gatewayId.
   */
  com.google.protobuf.ByteString
      getGatewayIdBytes();

  /**
   * <pre>
   * Gateway time.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 2;</code>
   * @return Whether the time field is set.
   */
  boolean hasTime();
  /**
   * <pre>
   * Gateway time.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 2;</code>
   * @return The time.
   */
  com.google.protobuf.Timestamp getTime();
  /**
   * <pre>
   * Gateway time.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimeOrBuilder();

  /**
   * <pre>
   * Gateway location.
   * </pre>
   *
   * <code>.common.Location location = 3;</code>
   * @return Whether the location field is set.
   */
  boolean hasLocation();
  /**
   * <pre>
   * Gateway location.
   * </pre>
   *
   * <code>.common.Location location = 3;</code>
   * @return The location.
   */
  io.chirpstack.api.Location getLocation();
  /**
   * <pre>
   * Gateway location.
   * </pre>
   *
   * <code>.common.Location location = 3;</code>
   */
  io.chirpstack.api.LocationOrBuilder getLocationOrBuilder();

  /**
   * <pre>
   * Gateway configuration version (this maps to the config_version sent
   * by ChirpStack to the gateway).
   * </pre>
   *
   * <code>string config_version = 4;</code>
   * @return The configVersion.
   */
  java.lang.String getConfigVersion();
  /**
   * <pre>
   * Gateway configuration version (this maps to the config_version sent
   * by ChirpStack to the gateway).
   * </pre>
   *
   * <code>string config_version = 4;</code>
   * @return The bytes for configVersion.
   */
  com.google.protobuf.ByteString
      getConfigVersionBytes();

  /**
   * <pre>
   * Number of radio packets received.
   * </pre>
   *
   * <code>uint32 rx_packets_received = 5;</code>
   * @return The rxPacketsReceived.
   */
  int getRxPacketsReceived();

  /**
   * <pre>
   * Number of radio packets received with valid PHY CRC.
   * </pre>
   *
   * <code>uint32 rx_packets_received_ok = 6;</code>
   * @return The rxPacketsReceivedOk.
   */
  int getRxPacketsReceivedOk();

  /**
   * <pre>
   * Number of downlink packets received for transmission.
   * </pre>
   *
   * <code>uint32 tx_packets_received = 7;</code>
   * @return The txPacketsReceived.
   */
  int getTxPacketsReceived();

  /**
   * <pre>
   * Number of downlink packets emitted.
   * </pre>
   *
   * <code>uint32 tx_packets_emitted = 8;</code>
   * @return The txPacketsEmitted.
   */
  int getTxPacketsEmitted();

  /**
   * <pre>
   * Additional gateway meta-data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 10;</code>
   */
  int getMetadataCount();
  /**
   * <pre>
   * Additional gateway meta-data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 10;</code>
   */
  boolean containsMetadata(
      java.lang.String key);
  /**
   * Use {@link #getMetadataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getMetadata();
  /**
   * <pre>
   * Additional gateway meta-data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 10;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getMetadataMap();
  /**
   * <pre>
   * Additional gateway meta-data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 10;</code>
   */
  /* nullable */
java.lang.String getMetadataOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Additional gateway meta-data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 10;</code>
   */
  java.lang.String getMetadataOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Tx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; tx_packets_per_frequency = 12;</code>
   */
  int getTxPacketsPerFrequencyCount();
  /**
   * <pre>
   * Tx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; tx_packets_per_frequency = 12;</code>
   */
  boolean containsTxPacketsPerFrequency(
      int key);
  /**
   * Use {@link #getTxPacketsPerFrequencyMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getTxPacketsPerFrequency();
  /**
   * <pre>
   * Tx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; tx_packets_per_frequency = 12;</code>
   */
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getTxPacketsPerFrequencyMap();
  /**
   * <pre>
   * Tx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; tx_packets_per_frequency = 12;</code>
   */
  int getTxPacketsPerFrequencyOrDefault(
      int key,
      int defaultValue);
  /**
   * <pre>
   * Tx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; tx_packets_per_frequency = 12;</code>
   */
  int getTxPacketsPerFrequencyOrThrow(
      int key);

  /**
   * <pre>
   * Rx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; rx_packets_per_frequency = 13;</code>
   */
  int getRxPacketsPerFrequencyCount();
  /**
   * <pre>
   * Rx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; rx_packets_per_frequency = 13;</code>
   */
  boolean containsRxPacketsPerFrequency(
      int key);
  /**
   * Use {@link #getRxPacketsPerFrequencyMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getRxPacketsPerFrequency();
  /**
   * <pre>
   * Rx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; rx_packets_per_frequency = 13;</code>
   */
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getRxPacketsPerFrequencyMap();
  /**
   * <pre>
   * Rx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; rx_packets_per_frequency = 13;</code>
   */
  int getRxPacketsPerFrequencyOrDefault(
      int key,
      int defaultValue);
  /**
   * <pre>
   * Rx packets per frequency.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; rx_packets_per_frequency = 13;</code>
   */
  int getRxPacketsPerFrequencyOrThrow(
      int key);

  /**
   * <pre>
   * Tx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount tx_packets_per_modulation = 14;</code>
   */
  java.util.List<io.chirpstack.api.gw.PerModulationCount> 
      getTxPacketsPerModulationList();
  /**
   * <pre>
   * Tx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount tx_packets_per_modulation = 14;</code>
   */
  io.chirpstack.api.gw.PerModulationCount getTxPacketsPerModulation(int index);
  /**
   * <pre>
   * Tx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount tx_packets_per_modulation = 14;</code>
   */
  int getTxPacketsPerModulationCount();
  /**
   * <pre>
   * Tx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount tx_packets_per_modulation = 14;</code>
   */
  java.util.List<? extends io.chirpstack.api.gw.PerModulationCountOrBuilder> 
      getTxPacketsPerModulationOrBuilderList();
  /**
   * <pre>
   * Tx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount tx_packets_per_modulation = 14;</code>
   */
  io.chirpstack.api.gw.PerModulationCountOrBuilder getTxPacketsPerModulationOrBuilder(
      int index);

  /**
   * <pre>
   * Rx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount rx_packets_per_modulation = 15;</code>
   */
  java.util.List<io.chirpstack.api.gw.PerModulationCount> 
      getRxPacketsPerModulationList();
  /**
   * <pre>
   * Rx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount rx_packets_per_modulation = 15;</code>
   */
  io.chirpstack.api.gw.PerModulationCount getRxPacketsPerModulation(int index);
  /**
   * <pre>
   * Rx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount rx_packets_per_modulation = 15;</code>
   */
  int getRxPacketsPerModulationCount();
  /**
   * <pre>
   * Rx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount rx_packets_per_modulation = 15;</code>
   */
  java.util.List<? extends io.chirpstack.api.gw.PerModulationCountOrBuilder> 
      getRxPacketsPerModulationOrBuilderList();
  /**
   * <pre>
   * Rx packets per modulation parameters.
   * </pre>
   *
   * <code>repeated .gw.PerModulationCount rx_packets_per_modulation = 15;</code>
   */
  io.chirpstack.api.gw.PerModulationCountOrBuilder getRxPacketsPerModulationOrBuilder(
      int index);

  /**
   * <pre>
   * Tx packets per status.
   * </pre>
   *
   * <code>map&lt;string, uint32&gt; tx_packets_per_status = 16;</code>
   */
  int getTxPacketsPerStatusCount();
  /**
   * <pre>
   * Tx packets per status.
   * </pre>
   *
   * <code>map&lt;string, uint32&gt; tx_packets_per_status = 16;</code>
   */
  boolean containsTxPacketsPerStatus(
      java.lang.String key);
  /**
   * Use {@link #getTxPacketsPerStatusMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getTxPacketsPerStatus();
  /**
   * <pre>
   * Tx packets per status.
   * </pre>
   *
   * <code>map&lt;string, uint32&gt; tx_packets_per_status = 16;</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getTxPacketsPerStatusMap();
  /**
   * <pre>
   * Tx packets per status.
   * </pre>
   *
   * <code>map&lt;string, uint32&gt; tx_packets_per_status = 16;</code>
   */
  int getTxPacketsPerStatusOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * Tx packets per status.
   * </pre>
   *
   * <code>map&lt;string, uint32&gt; tx_packets_per_status = 16;</code>
   */
  int getTxPacketsPerStatusOrThrow(
      java.lang.String key);
}
