// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/internal.proto

// Protobuf Java Version: 3.25.1
package io.chirpstack.internal;

/**
 * Protobuf type {@code internal.DeviceSession}
 */
public final class DeviceSession extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:internal.DeviceSession)
    DeviceSessionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DeviceSession.newBuilder() to construct.
  private DeviceSession(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DeviceSession() {
    devEui_ = com.google.protobuf.ByteString.EMPTY;
    devAddr_ = com.google.protobuf.ByteString.EMPTY;
    joinEui_ = com.google.protobuf.ByteString.EMPTY;
    macVersion_ = 0;
    fNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
    sNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
    nwkSEncKey_ = com.google.protobuf.ByteString.EMPTY;
    jsSessionKeyId_ = com.google.protobuf.ByteString.EMPTY;
    enabledUplinkChannelIndices_ = emptyIntList();
    uplinkAdrHistory_ = java.util.Collections.emptyList();
    regionConfigId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DeviceSession();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 19:
        return internalGetExtraUplinkChannels();
      case 31:
        return internalGetMacCommandErrorCount();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.chirpstack.internal.DeviceSession.class, io.chirpstack.internal.DeviceSession.Builder.class);
  }

  private int bitField0_;
  public static final int DEV_EUI_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString devEui_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Device EUI.
   * </pre>
   *
   * <code>bytes dev_eui = 1;</code>
   * @return The devEui.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDevEui() {
    return devEui_;
  }

  public static final int DEV_ADDR_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString devAddr_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Device address.
   * </pre>
   *
   * <code>bytes dev_addr = 2;</code>
   * @return The devAddr.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDevAddr() {
    return devAddr_;
  }

  public static final int JOIN_EUI_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString joinEui_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Join EUI.
   * </pre>
   *
   * <code>bytes join_eui = 3;</code>
   * @return The joinEui.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getJoinEui() {
    return joinEui_;
  }

  public static final int MAC_VERSION_FIELD_NUMBER = 4;
  private int macVersion_ = 0;
  /**
   * <pre>
   * LoRaWAN mac-version.
   * </pre>
   *
   * <code>.common.MacVersion mac_version = 4;</code>
   * @return The enum numeric value on the wire for macVersion.
   */
  @java.lang.Override public int getMacVersionValue() {
    return macVersion_;
  }
  /**
   * <pre>
   * LoRaWAN mac-version.
   * </pre>
   *
   * <code>.common.MacVersion mac_version = 4;</code>
   * @return The macVersion.
   */
  @java.lang.Override public io.chirpstack.api.MacVersion getMacVersion() {
    io.chirpstack.api.MacVersion result = io.chirpstack.api.MacVersion.forNumber(macVersion_);
    return result == null ? io.chirpstack.api.MacVersion.UNRECOGNIZED : result;
  }

  public static final int F_NWK_S_INT_KEY_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString fNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * FNwkSIntKey.
   * </pre>
   *
   * <code>bytes f_nwk_s_int_key = 5;</code>
   * @return The fNwkSIntKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getFNwkSIntKey() {
    return fNwkSIntKey_;
  }

  public static final int S_NWK_S_INT_KEY_FIELD_NUMBER = 6;
  private com.google.protobuf.ByteString sNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * SNwkSIntKey.
   * </pre>
   *
   * <code>bytes s_nwk_s_int_key = 6;</code>
   * @return The sNwkSIntKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSNwkSIntKey() {
    return sNwkSIntKey_;
  }

  public static final int NWK_S_ENC_KEY_FIELD_NUMBER = 7;
  private com.google.protobuf.ByteString nwkSEncKey_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * NwkSEncKey.
   * </pre>
   *
   * <code>bytes nwk_s_enc_key = 7;</code>
   * @return The nwkSEncKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNwkSEncKey() {
    return nwkSEncKey_;
  }

  public static final int APP_S_KEY_FIELD_NUMBER = 8;
  private io.chirpstack.api.KeyEnvelope appSKey_;
  /**
   * <pre>
   * AppSKey envelope.
   * </pre>
   *
   * <code>.common.KeyEnvelope app_s_key = 8;</code>
   * @return Whether the appSKey field is set.
   */
  @java.lang.Override
  public boolean hasAppSKey() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * AppSKey envelope.
   * </pre>
   *
   * <code>.common.KeyEnvelope app_s_key = 8;</code>
   * @return The appSKey.
   */
  @java.lang.Override
  public io.chirpstack.api.KeyEnvelope getAppSKey() {
    return appSKey_ == null ? io.chirpstack.api.KeyEnvelope.getDefaultInstance() : appSKey_;
  }
  /**
   * <pre>
   * AppSKey envelope.
   * </pre>
   *
   * <code>.common.KeyEnvelope app_s_key = 8;</code>
   */
  @java.lang.Override
  public io.chirpstack.api.KeyEnvelopeOrBuilder getAppSKeyOrBuilder() {
    return appSKey_ == null ? io.chirpstack.api.KeyEnvelope.getDefaultInstance() : appSKey_;
  }

  public static final int JS_SESSION_KEY_ID_FIELD_NUMBER = 42;
  private com.google.protobuf.ByteString jsSessionKeyId_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * JS Session Key ID.
   * </pre>
   *
   * <code>bytes js_session_key_id = 42;</code>
   * @return The jsSessionKeyId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getJsSessionKeyId() {
    return jsSessionKeyId_;
  }

  public static final int F_CNT_UP_FIELD_NUMBER = 9;
  private int fCntUp_ = 0;
  /**
   * <pre>
   * Uplink frame-counter.
   * </pre>
   *
   * <code>uint32 f_cnt_up = 9;</code>
   * @return The fCntUp.
   */
  @java.lang.Override
  public int getFCntUp() {
    return fCntUp_;
  }

  public static final int N_F_CNT_DOWN_FIELD_NUMBER = 10;
  private int nFCntDown_ = 0;
  /**
   * <pre>
   * Downlink frame-counter (ns).
   * </pre>
   *
   * <code>uint32 n_f_cnt_down = 10;</code>
   * @return The nFCntDown.
   */
  @java.lang.Override
  public int getNFCntDown() {
    return nFCntDown_;
  }

  public static final int A_F_CNT_DOWN_FIELD_NUMBER = 11;
  private int aFCntDown_ = 0;
  /**
   * <pre>
   * Downlink frame-counter (as).
   * </pre>
   *
   * <code>uint32 a_f_cnt_down = 11;</code>
   * @return The aFCntDown.
   */
  @java.lang.Override
  public int getAFCntDown() {
    return aFCntDown_;
  }

  public static final int CONF_F_CNT_FIELD_NUMBER = 12;
  private int confFCnt_ = 0;
  /**
   * <pre>
   * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or
   * a_f_cnt_down).
   * </pre>
   *
   * <code>uint32 conf_f_cnt = 12;</code>
   * @return The confFCnt.
   */
  @java.lang.Override
  public int getConfFCnt() {
    return confFCnt_;
  }

  public static final int SKIP_F_CNT_CHECK_FIELD_NUMBER = 13;
  private boolean skipFCntCheck_ = false;
  /**
   * <pre>
   * Skip uplink frame-counter validation.
   * </pre>
   *
   * <code>bool skip_f_cnt_check = 13;</code>
   * @return The skipFCntCheck.
   */
  @java.lang.Override
  public boolean getSkipFCntCheck() {
    return skipFCntCheck_;
  }

  public static final int RX1_DELAY_FIELD_NUMBER = 14;
  private int rx1Delay_ = 0;
  /**
   * <pre>
   * RX1 delay.
   * </pre>
   *
   * <code>uint32 rx1_delay = 14;</code>
   * @return The rx1Delay.
   */
  @java.lang.Override
  public int getRx1Delay() {
    return rx1Delay_;
  }

  public static final int RX1_DR_OFFSET_FIELD_NUMBER = 15;
  private int rx1DrOffset_ = 0;
  /**
   * <pre>
   * RX1 data-rate offset.
   * </pre>
   *
   * <code>uint32 rx1_dr_offset = 15;</code>
   * @return The rx1DrOffset.
   */
  @java.lang.Override
  public int getRx1DrOffset() {
    return rx1DrOffset_;
  }

  public static final int RX2_DR_FIELD_NUMBER = 16;
  private int rx2Dr_ = 0;
  /**
   * <pre>
   * RX2 data-rate.
   * </pre>
   *
   * <code>uint32 rx2_dr = 16;</code>
   * @return The rx2Dr.
   */
  @java.lang.Override
  public int getRx2Dr() {
    return rx2Dr_;
  }

  public static final int RX2_FREQUENCY_FIELD_NUMBER = 17;
  private int rx2Frequency_ = 0;
  /**
   * <pre>
   * RX2 frequency.
   * </pre>
   *
   * <code>uint32 rx2_frequency = 17;</code>
   * @return The rx2Frequency.
   */
  @java.lang.Override
  public int getRx2Frequency() {
    return rx2Frequency_;
  }

  public static final int ENABLED_UPLINK_CHANNEL_INDICES_FIELD_NUMBER = 18;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList enabledUplinkChannelIndices_ =
      emptyIntList();
  /**
   * <pre>
   * Enabled uplink channels.
   * </pre>
   *
   * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
   * @return A list containing the enabledUplinkChannelIndices.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getEnabledUplinkChannelIndicesList() {
    return enabledUplinkChannelIndices_;
  }
  /**
   * <pre>
   * Enabled uplink channels.
   * </pre>
   *
   * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
   * @return The count of enabledUplinkChannelIndices.
   */
  public int getEnabledUplinkChannelIndicesCount() {
    return enabledUplinkChannelIndices_.size();
  }
  /**
   * <pre>
   * Enabled uplink channels.
   * </pre>
   *
   * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
   * @param index The index of the element to return.
   * @return The enabledUplinkChannelIndices at the given index.
   */
  public int getEnabledUplinkChannelIndices(int index) {
    return enabledUplinkChannelIndices_.getInt(index);
  }
  private int enabledUplinkChannelIndicesMemoizedSerializedSize = -1;

  public static final int EXTRA_UPLINK_CHANNELS_FIELD_NUMBER = 19;
  private static final class ExtraUplinkChannelsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel>newDefaultInstance(
                io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_ExtraUplinkChannelsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.chirpstack.internal.DeviceSessionChannel.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> extraUplinkChannels_;
  private com.google.protobuf.MapField<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel>
  internalGetExtraUplinkChannels() {
    if (extraUplinkChannels_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ExtraUplinkChannelsDefaultEntryHolder.defaultEntry);
    }
    return extraUplinkChannels_;
  }
  public int getExtraUplinkChannelsCount() {
    return internalGetExtraUplinkChannels().getMap().size();
  }
  /**
   * <pre>
   * Extra user-defined uplink channels.
   * </pre>
   *
   * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
   */
  @java.lang.Override
  public boolean containsExtraUplinkChannels(
      int key) {

    return internalGetExtraUplinkChannels().getMap().containsKey(key);
  }
  /**
   * Use {@link #getExtraUplinkChannelsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> getExtraUplinkChannels() {
    return getExtraUplinkChannelsMap();
  }
  /**
   * <pre>
   * Extra user-defined uplink channels.
   * </pre>
   *
   * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> getExtraUplinkChannelsMap() {
    return internalGetExtraUplinkChannels().getMap();
  }
  /**
   * <pre>
   * Extra user-defined uplink channels.
   * </pre>
   *
   * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
   */
  @java.lang.Override
  public /* nullable */
io.chirpstack.internal.DeviceSessionChannel getExtraUplinkChannelsOrDefault(
      int key,
      /* nullable */
io.chirpstack.internal.DeviceSessionChannel defaultValue) {

    java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> map =
        internalGetExtraUplinkChannels().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Extra user-defined uplink channels.
   * </pre>
   *
   * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.DeviceSessionChannel getExtraUplinkChannelsOrThrow(
      int key) {

    java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> map =
        internalGetExtraUplinkChannels().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int CLASS_B_PING_SLOT_DR_FIELD_NUMBER = 20;
  private int classBPingSlotDr_ = 0;
  /**
   * <pre>
   * Class-B ping-slot data-rate.
   * </pre>
   *
   * <code>uint32 class_b_ping_slot_dr = 20;</code>
   * @return The classBPingSlotDr.
   */
  @java.lang.Override
  public int getClassBPingSlotDr() {
    return classBPingSlotDr_;
  }

  public static final int CLASS_B_PING_SLOT_FREQ_FIELD_NUMBER = 21;
  private int classBPingSlotFreq_ = 0;
  /**
   * <pre>
   * Class-B ping-slot frequency.
   * </pre>
   *
   * <code>uint32 class_b_ping_slot_freq = 21;</code>
   * @return The classBPingSlotFreq.
   */
  @java.lang.Override
  public int getClassBPingSlotFreq() {
    return classBPingSlotFreq_;
  }

  public static final int CLASS_B_PING_SLOT_NB_FIELD_NUMBER = 22;
  private int classBPingSlotNb_ = 0;
  /**
   * <pre>
   * Class-B ping-slot nb.
   * </pre>
   *
   * <code>uint32 class_b_ping_slot_nb = 22;</code>
   * @return The classBPingSlotNb.
   */
  @java.lang.Override
  public int getClassBPingSlotNb() {
    return classBPingSlotNb_;
  }

  public static final int NB_TRANS_FIELD_NUMBER = 23;
  private int nbTrans_ = 0;
  /**
   * <pre>
   * Nb. transmissions.
   * </pre>
   *
   * <code>uint32 nb_trans = 23;</code>
   * @return The nbTrans.
   */
  @java.lang.Override
  public int getNbTrans() {
    return nbTrans_;
  }

  public static final int TX_POWER_INDEX_FIELD_NUMBER = 24;
  private int txPowerIndex_ = 0;
  /**
   * <pre>
   * TXPowerIndex which the node is using. The possible values are defined
   * by the lorawan/band package and are region specific. By default it is
   * assumed that the node is using TXPower 0. This value is controlled by
   * the ADR engine.
   * </pre>
   *
   * <code>uint32 tx_power_index = 24;</code>
   * @return The txPowerIndex.
   */
  @java.lang.Override
  public int getTxPowerIndex() {
    return txPowerIndex_;
  }

  public static final int DR_FIELD_NUMBER = 25;
  private int dr_ = 0;
  /**
   * <pre>
   * DR defines the (last known) data-rate at which the node is operating.
   * This value is controlled by the ADR engine.
   * </pre>
   *
   * <code>uint32 dr = 25;</code>
   * @return The dr.
   */
  @java.lang.Override
  public int getDr() {
    return dr_;
  }

  public static final int ADR_FIELD_NUMBER = 26;
  private boolean adr_ = false;
  /**
   * <pre>
   * ADR defines if the device has ADR enabled.
   * </pre>
   *
   * <code>bool adr = 26;</code>
   * @return The adr.
   */
  @java.lang.Override
  public boolean getAdr() {
    return adr_;
  }

  public static final int MAX_SUPPORTED_TX_POWER_INDEX_FIELD_NUMBER = 27;
  private int maxSupportedTxPowerIndex_ = 0;
  /**
   * <pre>
   * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
   * by the node, or 0 when not set.
   * </pre>
   *
   * <code>uint32 max_supported_tx_power_index = 27;</code>
   * @return The maxSupportedTxPowerIndex.
   */
  @java.lang.Override
  public int getMaxSupportedTxPowerIndex() {
    return maxSupportedTxPowerIndex_;
  }

  public static final int MIN_SUPPORTED_TX_POWER_INDEX_FIELD_NUMBER = 28;
  private int minSupportedTxPowerIndex_ = 0;
  /**
   * <pre>
   * MinSupportedTXPowerIndex defines the minimum supported tx-power index
   * by the node (default 0).
   * </pre>
   *
   * <code>uint32 min_supported_tx_power_index = 28;</code>
   * @return The minSupportedTxPowerIndex.
   */
  @java.lang.Override
  public int getMinSupportedTxPowerIndex() {
    return minSupportedTxPowerIndex_;
  }

  public static final int PENDING_REJOIN_DEVICE_SESSION_FIELD_NUMBER = 29;
  private io.chirpstack.internal.DeviceSession pendingRejoinDeviceSession_;
  /**
   * <pre>
   * Pending rejoin device-session contains a device-session which has not
   * yet been activated by the device (by sending a first uplink).
   * </pre>
   *
   * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
   * @return Whether the pendingRejoinDeviceSession field is set.
   */
  @java.lang.Override
  public boolean hasPendingRejoinDeviceSession() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Pending rejoin device-session contains a device-session which has not
   * yet been activated by the device (by sending a first uplink).
   * </pre>
   *
   * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
   * @return The pendingRejoinDeviceSession.
   */
  @java.lang.Override
  public io.chirpstack.internal.DeviceSession getPendingRejoinDeviceSession() {
    return pendingRejoinDeviceSession_ == null ? io.chirpstack.internal.DeviceSession.getDefaultInstance() : pendingRejoinDeviceSession_;
  }
  /**
   * <pre>
   * Pending rejoin device-session contains a device-session which has not
   * yet been activated by the device (by sending a first uplink).
   * </pre>
   *
   * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.DeviceSessionOrBuilder getPendingRejoinDeviceSessionOrBuilder() {
    return pendingRejoinDeviceSession_ == null ? io.chirpstack.internal.DeviceSession.getDefaultInstance() : pendingRejoinDeviceSession_;
  }

  public static final int UPLINK_ADR_HISTORY_FIELD_NUMBER = 30;
  @SuppressWarnings("serial")
  private java.util.List<io.chirpstack.internal.UplinkAdrHistory> uplinkAdrHistory_;
  /**
   * <pre>
   * Uplink history for ADR (last 20 uplink transmissions).
   * This table is reset in case one of parameters has changed:
   *   * DR
   *   * TxPower
   *   * NbTrans
   * </pre>
   *
   * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
   */
  @java.lang.Override
  public java.util.List<io.chirpstack.internal.UplinkAdrHistory> getUplinkAdrHistoryList() {
    return uplinkAdrHistory_;
  }
  /**
   * <pre>
   * Uplink history for ADR (last 20 uplink transmissions).
   * This table is reset in case one of parameters has changed:
   *   * DR
   *   * TxPower
   *   * NbTrans
   * </pre>
   *
   * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.chirpstack.internal.UplinkAdrHistoryOrBuilder> 
      getUplinkAdrHistoryOrBuilderList() {
    return uplinkAdrHistory_;
  }
  /**
   * <pre>
   * Uplink history for ADR (last 20 uplink transmissions).
   * This table is reset in case one of parameters has changed:
   *   * DR
   *   * TxPower
   *   * NbTrans
   * </pre>
   *
   * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
   */
  @java.lang.Override
  public int getUplinkAdrHistoryCount() {
    return uplinkAdrHistory_.size();
  }
  /**
   * <pre>
   * Uplink history for ADR (last 20 uplink transmissions).
   * This table is reset in case one of parameters has changed:
   *   * DR
   *   * TxPower
   *   * NbTrans
   * </pre>
   *
   * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.UplinkAdrHistory getUplinkAdrHistory(int index) {
    return uplinkAdrHistory_.get(index);
  }
  /**
   * <pre>
   * Uplink history for ADR (last 20 uplink transmissions).
   * This table is reset in case one of parameters has changed:
   *   * DR
   *   * TxPower
   *   * NbTrans
   * </pre>
   *
   * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.UplinkAdrHistoryOrBuilder getUplinkAdrHistoryOrBuilder(
      int index) {
    return uplinkAdrHistory_.get(index);
  }

  public static final int MAC_COMMAND_ERROR_COUNT_FIELD_NUMBER = 31;
  private static final class MacCommandErrorCountDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_MacCommandErrorCountEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0);
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Integer, java.lang.Integer> macCommandErrorCount_;
  private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
  internalGetMacCommandErrorCount() {
    if (macCommandErrorCount_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          MacCommandErrorCountDefaultEntryHolder.defaultEntry);
    }
    return macCommandErrorCount_;
  }
  public int getMacCommandErrorCountCount() {
    return internalGetMacCommandErrorCount().getMap().size();
  }
  /**
   * <pre>
   * Mac-command error count.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
   */
  @java.lang.Override
  public boolean containsMacCommandErrorCount(
      int key) {

    return internalGetMacCommandErrorCount().getMap().containsKey(key);
  }
  /**
   * Use {@link #getMacCommandErrorCountMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, java.lang.Integer> getMacCommandErrorCount() {
    return getMacCommandErrorCountMap();
  }
  /**
   * <pre>
   * Mac-command error count.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Integer, java.lang.Integer> getMacCommandErrorCountMap() {
    return internalGetMacCommandErrorCount().getMap();
  }
  /**
   * <pre>
   * Mac-command error count.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
   */
  @java.lang.Override
  public int getMacCommandErrorCountOrDefault(
      int key,
      int defaultValue) {

    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetMacCommandErrorCount().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Mac-command error count.
   * </pre>
   *
   * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
   */
  @java.lang.Override
  public int getMacCommandErrorCountOrThrow(
      int key) {

    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetMacCommandErrorCount().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int LAST_DEVICE_STATUS_REQUEST_FIELD_NUMBER = 32;
  private com.google.protobuf.Timestamp lastDeviceStatusRequest_;
  /**
   * <pre>
   * Last device-status request.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
   * @return Whether the lastDeviceStatusRequest field is set.
   */
  @java.lang.Override
  public boolean hasLastDeviceStatusRequest() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Last device-status request.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
   * @return The lastDeviceStatusRequest.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getLastDeviceStatusRequest() {
    return lastDeviceStatusRequest_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : lastDeviceStatusRequest_;
  }
  /**
   * <pre>
   * Last device-status request.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getLastDeviceStatusRequestOrBuilder() {
    return lastDeviceStatusRequest_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : lastDeviceStatusRequest_;
  }

  public static final int REJOIN_REQUEST_ENABLED_FIELD_NUMBER = 33;
  private boolean rejoinRequestEnabled_ = false;
  /**
   * <pre>
   * RejoinRequestEnabled defines if the rejoin-request is enabled on the
   * device.
   * </pre>
   *
   * <code>bool rejoin_request_enabled = 33;</code>
   * @return The rejoinRequestEnabled.
   */
  @java.lang.Override
  public boolean getRejoinRequestEnabled() {
    return rejoinRequestEnabled_;
  }

  public static final int REJOIN_REQUEST_MAX_COUNT_N_FIELD_NUMBER = 34;
  private int rejoinRequestMaxCountN_ = 0;
  /**
   * <pre>
   * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
   * the rejoin-request.
   * </pre>
   *
   * <code>uint32 rejoin_request_max_count_n = 34;</code>
   * @return The rejoinRequestMaxCountN.
   */
  @java.lang.Override
  public int getRejoinRequestMaxCountN() {
    return rejoinRequestMaxCountN_;
  }

  public static final int REJOIN_REQUEST_MAX_TIME_N_FIELD_NUMBER = 35;
  private int rejoinRequestMaxTimeN_ = 0;
  /**
   * <pre>
   * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
   * for the rejoin-request.
   * </pre>
   *
   * <code>uint32 rejoin_request_max_time_n = 35;</code>
   * @return The rejoinRequestMaxTimeN.
   */
  @java.lang.Override
  public int getRejoinRequestMaxTimeN() {
    return rejoinRequestMaxTimeN_;
  }

  public static final int REJOIN_COUNT_0_FIELD_NUMBER = 36;
  private int rejoinCount0_ = 0;
  /**
   * <pre>
   * Rejoin counter (RJCount0).
   * This counter is reset to 0 after each successful join-accept.
   * </pre>
   *
   * <code>uint32 rejoin_count_0 = 36;</code>
   * @return The rejoinCount0.
   */
  @java.lang.Override
  public int getRejoinCount0() {
    return rejoinCount0_;
  }

  public static final int UPLINK_DWELL_TIME_400MS_FIELD_NUMBER = 37;
  private boolean uplinkDwellTime400Ms_ = false;
  /**
   * <pre>
   * Uplink dwell time.
   * </pre>
   *
   * <code>bool uplink_dwell_time_400ms = 37;</code>
   * @return The uplinkDwellTime400ms.
   */
  @java.lang.Override
  public boolean getUplinkDwellTime400Ms() {
    return uplinkDwellTime400Ms_;
  }

  public static final int DOWNLINK_DWELL_TIME_400MS_FIELD_NUMBER = 38;
  private boolean downlinkDwellTime400Ms_ = false;
  /**
   * <pre>
   * Downlink dwell time.
   * </pre>
   *
   * <code>bool downlink_dwell_time_400ms = 38;</code>
   * @return The downlinkDwellTime400ms.
   */
  @java.lang.Override
  public boolean getDownlinkDwellTime400Ms() {
    return downlinkDwellTime400Ms_;
  }

  public static final int UPLINK_MAX_EIRP_INDEX_FIELD_NUMBER = 39;
  private int uplinkMaxEirpIndex_ = 0;
  /**
   * <pre>
   * Uplink max. EIRP index.
   * </pre>
   *
   * <code>uint32 uplink_max_eirp_index = 39;</code>
   * @return The uplinkMaxEirpIndex.
   */
  @java.lang.Override
  public int getUplinkMaxEirpIndex() {
    return uplinkMaxEirpIndex_;
  }

  public static final int REGION_CONFIG_ID_FIELD_NUMBER = 40;
  @SuppressWarnings("serial")
  private volatile java.lang.Object regionConfigId_ = "";
  /**
   * <pre>
   * Region configuration ID.
   * </pre>
   *
   * <code>string region_config_id = 40;</code>
   * @return The regionConfigId.
   */
  @java.lang.Override
  public java.lang.String getRegionConfigId() {
    java.lang.Object ref = regionConfigId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      regionConfigId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Region configuration ID.
   * </pre>
   *
   * <code>string region_config_id = 40;</code>
   * @return The bytes for regionConfigId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRegionConfigIdBytes() {
    java.lang.Object ref = regionConfigId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      regionConfigId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RELAY_FIELD_NUMBER = 41;
  private io.chirpstack.internal.Relay relay_;
  /**
   * <pre>
   * Relay state.
   * </pre>
   *
   * <code>.internal.Relay relay = 41;</code>
   * @return Whether the relay field is set.
   */
  @java.lang.Override
  public boolean hasRelay() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Relay state.
   * </pre>
   *
   * <code>.internal.Relay relay = 41;</code>
   * @return The relay.
   */
  @java.lang.Override
  public io.chirpstack.internal.Relay getRelay() {
    return relay_ == null ? io.chirpstack.internal.Relay.getDefaultInstance() : relay_;
  }
  /**
   * <pre>
   * Relay state.
   * </pre>
   *
   * <code>.internal.Relay relay = 41;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.RelayOrBuilder getRelayOrBuilder() {
    return relay_ == null ? io.chirpstack.internal.Relay.getDefaultInstance() : relay_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (!devEui_.isEmpty()) {
      output.writeBytes(1, devEui_);
    }
    if (!devAddr_.isEmpty()) {
      output.writeBytes(2, devAddr_);
    }
    if (!joinEui_.isEmpty()) {
      output.writeBytes(3, joinEui_);
    }
    if (macVersion_ != io.chirpstack.api.MacVersion.LORAWAN_1_0_0.getNumber()) {
      output.writeEnum(4, macVersion_);
    }
    if (!fNwkSIntKey_.isEmpty()) {
      output.writeBytes(5, fNwkSIntKey_);
    }
    if (!sNwkSIntKey_.isEmpty()) {
      output.writeBytes(6, sNwkSIntKey_);
    }
    if (!nwkSEncKey_.isEmpty()) {
      output.writeBytes(7, nwkSEncKey_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(8, getAppSKey());
    }
    if (fCntUp_ != 0) {
      output.writeUInt32(9, fCntUp_);
    }
    if (nFCntDown_ != 0) {
      output.writeUInt32(10, nFCntDown_);
    }
    if (aFCntDown_ != 0) {
      output.writeUInt32(11, aFCntDown_);
    }
    if (confFCnt_ != 0) {
      output.writeUInt32(12, confFCnt_);
    }
    if (skipFCntCheck_ != false) {
      output.writeBool(13, skipFCntCheck_);
    }
    if (rx1Delay_ != 0) {
      output.writeUInt32(14, rx1Delay_);
    }
    if (rx1DrOffset_ != 0) {
      output.writeUInt32(15, rx1DrOffset_);
    }
    if (rx2Dr_ != 0) {
      output.writeUInt32(16, rx2Dr_);
    }
    if (rx2Frequency_ != 0) {
      output.writeUInt32(17, rx2Frequency_);
    }
    if (getEnabledUplinkChannelIndicesList().size() > 0) {
      output.writeUInt32NoTag(146);
      output.writeUInt32NoTag(enabledUplinkChannelIndicesMemoizedSerializedSize);
    }
    for (int i = 0; i < enabledUplinkChannelIndices_.size(); i++) {
      output.writeUInt32NoTag(enabledUplinkChannelIndices_.getInt(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetExtraUplinkChannels(),
        ExtraUplinkChannelsDefaultEntryHolder.defaultEntry,
        19);
    if (classBPingSlotDr_ != 0) {
      output.writeUInt32(20, classBPingSlotDr_);
    }
    if (classBPingSlotFreq_ != 0) {
      output.writeUInt32(21, classBPingSlotFreq_);
    }
    if (classBPingSlotNb_ != 0) {
      output.writeUInt32(22, classBPingSlotNb_);
    }
    if (nbTrans_ != 0) {
      output.writeUInt32(23, nbTrans_);
    }
    if (txPowerIndex_ != 0) {
      output.writeUInt32(24, txPowerIndex_);
    }
    if (dr_ != 0) {
      output.writeUInt32(25, dr_);
    }
    if (adr_ != false) {
      output.writeBool(26, adr_);
    }
    if (maxSupportedTxPowerIndex_ != 0) {
      output.writeUInt32(27, maxSupportedTxPowerIndex_);
    }
    if (minSupportedTxPowerIndex_ != 0) {
      output.writeUInt32(28, minSupportedTxPowerIndex_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(29, getPendingRejoinDeviceSession());
    }
    for (int i = 0; i < uplinkAdrHistory_.size(); i++) {
      output.writeMessage(30, uplinkAdrHistory_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetMacCommandErrorCount(),
        MacCommandErrorCountDefaultEntryHolder.defaultEntry,
        31);
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(32, getLastDeviceStatusRequest());
    }
    if (rejoinRequestEnabled_ != false) {
      output.writeBool(33, rejoinRequestEnabled_);
    }
    if (rejoinRequestMaxCountN_ != 0) {
      output.writeUInt32(34, rejoinRequestMaxCountN_);
    }
    if (rejoinRequestMaxTimeN_ != 0) {
      output.writeUInt32(35, rejoinRequestMaxTimeN_);
    }
    if (rejoinCount0_ != 0) {
      output.writeUInt32(36, rejoinCount0_);
    }
    if (uplinkDwellTime400Ms_ != false) {
      output.writeBool(37, uplinkDwellTime400Ms_);
    }
    if (downlinkDwellTime400Ms_ != false) {
      output.writeBool(38, downlinkDwellTime400Ms_);
    }
    if (uplinkMaxEirpIndex_ != 0) {
      output.writeUInt32(39, uplinkMaxEirpIndex_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(regionConfigId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 40, regionConfigId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(41, getRelay());
    }
    if (!jsSessionKeyId_.isEmpty()) {
      output.writeBytes(42, jsSessionKeyId_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!devEui_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, devEui_);
    }
    if (!devAddr_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, devAddr_);
    }
    if (!joinEui_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, joinEui_);
    }
    if (macVersion_ != io.chirpstack.api.MacVersion.LORAWAN_1_0_0.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, macVersion_);
    }
    if (!fNwkSIntKey_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(5, fNwkSIntKey_);
    }
    if (!sNwkSIntKey_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(6, sNwkSIntKey_);
    }
    if (!nwkSEncKey_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(7, nwkSEncKey_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getAppSKey());
    }
    if (fCntUp_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(9, fCntUp_);
    }
    if (nFCntDown_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, nFCntDown_);
    }
    if (aFCntDown_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, aFCntDown_);
    }
    if (confFCnt_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(12, confFCnt_);
    }
    if (skipFCntCheck_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(13, skipFCntCheck_);
    }
    if (rx1Delay_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(14, rx1Delay_);
    }
    if (rx1DrOffset_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(15, rx1DrOffset_);
    }
    if (rx2Dr_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(16, rx2Dr_);
    }
    if (rx2Frequency_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(17, rx2Frequency_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < enabledUplinkChannelIndices_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(enabledUplinkChannelIndices_.getInt(i));
      }
      size += dataSize;
      if (!getEnabledUplinkChannelIndicesList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      enabledUplinkChannelIndicesMemoizedSerializedSize = dataSize;
    }
    for (java.util.Map.Entry<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> entry
         : internalGetExtraUplinkChannels().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel>
      extraUplinkChannels__ = ExtraUplinkChannelsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, extraUplinkChannels__);
    }
    if (classBPingSlotDr_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(20, classBPingSlotDr_);
    }
    if (classBPingSlotFreq_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(21, classBPingSlotFreq_);
    }
    if (classBPingSlotNb_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(22, classBPingSlotNb_);
    }
    if (nbTrans_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(23, nbTrans_);
    }
    if (txPowerIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(24, txPowerIndex_);
    }
    if (dr_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(25, dr_);
    }
    if (adr_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(26, adr_);
    }
    if (maxSupportedTxPowerIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(27, maxSupportedTxPowerIndex_);
    }
    if (minSupportedTxPowerIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(28, minSupportedTxPowerIndex_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, getPendingRejoinDeviceSession());
    }
    for (int i = 0; i < uplinkAdrHistory_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, uplinkAdrHistory_.get(i));
    }
    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
         : internalGetMacCommandErrorCount().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
      macCommandErrorCount__ = MacCommandErrorCountDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, macCommandErrorCount__);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(32, getLastDeviceStatusRequest());
    }
    if (rejoinRequestEnabled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(33, rejoinRequestEnabled_);
    }
    if (rejoinRequestMaxCountN_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(34, rejoinRequestMaxCountN_);
    }
    if (rejoinRequestMaxTimeN_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(35, rejoinRequestMaxTimeN_);
    }
    if (rejoinCount0_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(36, rejoinCount0_);
    }
    if (uplinkDwellTime400Ms_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(37, uplinkDwellTime400Ms_);
    }
    if (downlinkDwellTime400Ms_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(38, downlinkDwellTime400Ms_);
    }
    if (uplinkMaxEirpIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(39, uplinkMaxEirpIndex_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(regionConfigId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(40, regionConfigId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(41, getRelay());
    }
    if (!jsSessionKeyId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(42, jsSessionKeyId_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.chirpstack.internal.DeviceSession)) {
      return super.equals(obj);
    }
    io.chirpstack.internal.DeviceSession other = (io.chirpstack.internal.DeviceSession) obj;

    if (!getDevEui()
        .equals(other.getDevEui())) return false;
    if (!getDevAddr()
        .equals(other.getDevAddr())) return false;
    if (!getJoinEui()
        .equals(other.getJoinEui())) return false;
    if (macVersion_ != other.macVersion_) return false;
    if (!getFNwkSIntKey()
        .equals(other.getFNwkSIntKey())) return false;
    if (!getSNwkSIntKey()
        .equals(other.getSNwkSIntKey())) return false;
    if (!getNwkSEncKey()
        .equals(other.getNwkSEncKey())) return false;
    if (hasAppSKey() != other.hasAppSKey()) return false;
    if (hasAppSKey()) {
      if (!getAppSKey()
          .equals(other.getAppSKey())) return false;
    }
    if (!getJsSessionKeyId()
        .equals(other.getJsSessionKeyId())) return false;
    if (getFCntUp()
        != other.getFCntUp()) return false;
    if (getNFCntDown()
        != other.getNFCntDown()) return false;
    if (getAFCntDown()
        != other.getAFCntDown()) return false;
    if (getConfFCnt()
        != other.getConfFCnt()) return false;
    if (getSkipFCntCheck()
        != other.getSkipFCntCheck()) return false;
    if (getRx1Delay()
        != other.getRx1Delay()) return false;
    if (getRx1DrOffset()
        != other.getRx1DrOffset()) return false;
    if (getRx2Dr()
        != other.getRx2Dr()) return false;
    if (getRx2Frequency()
        != other.getRx2Frequency()) return false;
    if (!getEnabledUplinkChannelIndicesList()
        .equals(other.getEnabledUplinkChannelIndicesList())) return false;
    if (!internalGetExtraUplinkChannels().equals(
        other.internalGetExtraUplinkChannels())) return false;
    if (getClassBPingSlotDr()
        != other.getClassBPingSlotDr()) return false;
    if (getClassBPingSlotFreq()
        != other.getClassBPingSlotFreq()) return false;
    if (getClassBPingSlotNb()
        != other.getClassBPingSlotNb()) return false;
    if (getNbTrans()
        != other.getNbTrans()) return false;
    if (getTxPowerIndex()
        != other.getTxPowerIndex()) return false;
    if (getDr()
        != other.getDr()) return false;
    if (getAdr()
        != other.getAdr()) return false;
    if (getMaxSupportedTxPowerIndex()
        != other.getMaxSupportedTxPowerIndex()) return false;
    if (getMinSupportedTxPowerIndex()
        != other.getMinSupportedTxPowerIndex()) return false;
    if (hasPendingRejoinDeviceSession() != other.hasPendingRejoinDeviceSession()) return false;
    if (hasPendingRejoinDeviceSession()) {
      if (!getPendingRejoinDeviceSession()
          .equals(other.getPendingRejoinDeviceSession())) return false;
    }
    if (!getUplinkAdrHistoryList()
        .equals(other.getUplinkAdrHistoryList())) return false;
    if (!internalGetMacCommandErrorCount().equals(
        other.internalGetMacCommandErrorCount())) return false;
    if (hasLastDeviceStatusRequest() != other.hasLastDeviceStatusRequest()) return false;
    if (hasLastDeviceStatusRequest()) {
      if (!getLastDeviceStatusRequest()
          .equals(other.getLastDeviceStatusRequest())) return false;
    }
    if (getRejoinRequestEnabled()
        != other.getRejoinRequestEnabled()) return false;
    if (getRejoinRequestMaxCountN()
        != other.getRejoinRequestMaxCountN()) return false;
    if (getRejoinRequestMaxTimeN()
        != other.getRejoinRequestMaxTimeN()) return false;
    if (getRejoinCount0()
        != other.getRejoinCount0()) return false;
    if (getUplinkDwellTime400Ms()
        != other.getUplinkDwellTime400Ms()) return false;
    if (getDownlinkDwellTime400Ms()
        != other.getDownlinkDwellTime400Ms()) return false;
    if (getUplinkMaxEirpIndex()
        != other.getUplinkMaxEirpIndex()) return false;
    if (!getRegionConfigId()
        .equals(other.getRegionConfigId())) return false;
    if (hasRelay() != other.hasRelay()) return false;
    if (hasRelay()) {
      if (!getRelay()
          .equals(other.getRelay())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DEV_EUI_FIELD_NUMBER;
    hash = (53 * hash) + getDevEui().hashCode();
    hash = (37 * hash) + DEV_ADDR_FIELD_NUMBER;
    hash = (53 * hash) + getDevAddr().hashCode();
    hash = (37 * hash) + JOIN_EUI_FIELD_NUMBER;
    hash = (53 * hash) + getJoinEui().hashCode();
    hash = (37 * hash) + MAC_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + macVersion_;
    hash = (37 * hash) + F_NWK_S_INT_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getFNwkSIntKey().hashCode();
    hash = (37 * hash) + S_NWK_S_INT_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getSNwkSIntKey().hashCode();
    hash = (37 * hash) + NWK_S_ENC_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getNwkSEncKey().hashCode();
    if (hasAppSKey()) {
      hash = (37 * hash) + APP_S_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getAppSKey().hashCode();
    }
    hash = (37 * hash) + JS_SESSION_KEY_ID_FIELD_NUMBER;
    hash = (53 * hash) + getJsSessionKeyId().hashCode();
    hash = (37 * hash) + F_CNT_UP_FIELD_NUMBER;
    hash = (53 * hash) + getFCntUp();
    hash = (37 * hash) + N_F_CNT_DOWN_FIELD_NUMBER;
    hash = (53 * hash) + getNFCntDown();
    hash = (37 * hash) + A_F_CNT_DOWN_FIELD_NUMBER;
    hash = (53 * hash) + getAFCntDown();
    hash = (37 * hash) + CONF_F_CNT_FIELD_NUMBER;
    hash = (53 * hash) + getConfFCnt();
    hash = (37 * hash) + SKIP_F_CNT_CHECK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSkipFCntCheck());
    hash = (37 * hash) + RX1_DELAY_FIELD_NUMBER;
    hash = (53 * hash) + getRx1Delay();
    hash = (37 * hash) + RX1_DR_OFFSET_FIELD_NUMBER;
    hash = (53 * hash) + getRx1DrOffset();
    hash = (37 * hash) + RX2_DR_FIELD_NUMBER;
    hash = (53 * hash) + getRx2Dr();
    hash = (37 * hash) + RX2_FREQUENCY_FIELD_NUMBER;
    hash = (53 * hash) + getRx2Frequency();
    if (getEnabledUplinkChannelIndicesCount() > 0) {
      hash = (37 * hash) + ENABLED_UPLINK_CHANNEL_INDICES_FIELD_NUMBER;
      hash = (53 * hash) + getEnabledUplinkChannelIndicesList().hashCode();
    }
    if (!internalGetExtraUplinkChannels().getMap().isEmpty()) {
      hash = (37 * hash) + EXTRA_UPLINK_CHANNELS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetExtraUplinkChannels().hashCode();
    }
    hash = (37 * hash) + CLASS_B_PING_SLOT_DR_FIELD_NUMBER;
    hash = (53 * hash) + getClassBPingSlotDr();
    hash = (37 * hash) + CLASS_B_PING_SLOT_FREQ_FIELD_NUMBER;
    hash = (53 * hash) + getClassBPingSlotFreq();
    hash = (37 * hash) + CLASS_B_PING_SLOT_NB_FIELD_NUMBER;
    hash = (53 * hash) + getClassBPingSlotNb();
    hash = (37 * hash) + NB_TRANS_FIELD_NUMBER;
    hash = (53 * hash) + getNbTrans();
    hash = (37 * hash) + TX_POWER_INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getTxPowerIndex();
    hash = (37 * hash) + DR_FIELD_NUMBER;
    hash = (53 * hash) + getDr();
    hash = (37 * hash) + ADR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAdr());
    hash = (37 * hash) + MAX_SUPPORTED_TX_POWER_INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getMaxSupportedTxPowerIndex();
    hash = (37 * hash) + MIN_SUPPORTED_TX_POWER_INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getMinSupportedTxPowerIndex();
    if (hasPendingRejoinDeviceSession()) {
      hash = (37 * hash) + PENDING_REJOIN_DEVICE_SESSION_FIELD_NUMBER;
      hash = (53 * hash) + getPendingRejoinDeviceSession().hashCode();
    }
    if (getUplinkAdrHistoryCount() > 0) {
      hash = (37 * hash) + UPLINK_ADR_HISTORY_FIELD_NUMBER;
      hash = (53 * hash) + getUplinkAdrHistoryList().hashCode();
    }
    if (!internalGetMacCommandErrorCount().getMap().isEmpty()) {
      hash = (37 * hash) + MAC_COMMAND_ERROR_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + internalGetMacCommandErrorCount().hashCode();
    }
    if (hasLastDeviceStatusRequest()) {
      hash = (37 * hash) + LAST_DEVICE_STATUS_REQUEST_FIELD_NUMBER;
      hash = (53 * hash) + getLastDeviceStatusRequest().hashCode();
    }
    hash = (37 * hash) + REJOIN_REQUEST_ENABLED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRejoinRequestEnabled());
    hash = (37 * hash) + REJOIN_REQUEST_MAX_COUNT_N_FIELD_NUMBER;
    hash = (53 * hash) + getRejoinRequestMaxCountN();
    hash = (37 * hash) + REJOIN_REQUEST_MAX_TIME_N_FIELD_NUMBER;
    hash = (53 * hash) + getRejoinRequestMaxTimeN();
    hash = (37 * hash) + REJOIN_COUNT_0_FIELD_NUMBER;
    hash = (53 * hash) + getRejoinCount0();
    hash = (37 * hash) + UPLINK_DWELL_TIME_400MS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUplinkDwellTime400Ms());
    hash = (37 * hash) + DOWNLINK_DWELL_TIME_400MS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDownlinkDwellTime400Ms());
    hash = (37 * hash) + UPLINK_MAX_EIRP_INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getUplinkMaxEirpIndex();
    hash = (37 * hash) + REGION_CONFIG_ID_FIELD_NUMBER;
    hash = (53 * hash) + getRegionConfigId().hashCode();
    if (hasRelay()) {
      hash = (37 * hash) + RELAY_FIELD_NUMBER;
      hash = (53 * hash) + getRelay().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.chirpstack.internal.DeviceSession parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.chirpstack.internal.DeviceSession parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.chirpstack.internal.DeviceSession parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.chirpstack.internal.DeviceSession parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.chirpstack.internal.DeviceSession prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code internal.DeviceSession}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:internal.DeviceSession)
      io.chirpstack.internal.DeviceSessionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 19:
          return internalGetExtraUplinkChannels();
        case 31:
          return internalGetMacCommandErrorCount();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 19:
          return internalGetMutableExtraUplinkChannels();
        case 31:
          return internalGetMutableMacCommandErrorCount();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.chirpstack.internal.DeviceSession.class, io.chirpstack.internal.DeviceSession.Builder.class);
    }

    // Construct using io.chirpstack.internal.DeviceSession.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAppSKeyFieldBuilder();
        getPendingRejoinDeviceSessionFieldBuilder();
        getUplinkAdrHistoryFieldBuilder();
        getLastDeviceStatusRequestFieldBuilder();
        getRelayFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      bitField1_ = 0;
      devEui_ = com.google.protobuf.ByteString.EMPTY;
      devAddr_ = com.google.protobuf.ByteString.EMPTY;
      joinEui_ = com.google.protobuf.ByteString.EMPTY;
      macVersion_ = 0;
      fNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
      sNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
      nwkSEncKey_ = com.google.protobuf.ByteString.EMPTY;
      appSKey_ = null;
      if (appSKeyBuilder_ != null) {
        appSKeyBuilder_.dispose();
        appSKeyBuilder_ = null;
      }
      jsSessionKeyId_ = com.google.protobuf.ByteString.EMPTY;
      fCntUp_ = 0;
      nFCntDown_ = 0;
      aFCntDown_ = 0;
      confFCnt_ = 0;
      skipFCntCheck_ = false;
      rx1Delay_ = 0;
      rx1DrOffset_ = 0;
      rx2Dr_ = 0;
      rx2Frequency_ = 0;
      enabledUplinkChannelIndices_ = emptyIntList();
      internalGetMutableExtraUplinkChannels().clear();
      classBPingSlotDr_ = 0;
      classBPingSlotFreq_ = 0;
      classBPingSlotNb_ = 0;
      nbTrans_ = 0;
      txPowerIndex_ = 0;
      dr_ = 0;
      adr_ = false;
      maxSupportedTxPowerIndex_ = 0;
      minSupportedTxPowerIndex_ = 0;
      pendingRejoinDeviceSession_ = null;
      if (pendingRejoinDeviceSessionBuilder_ != null) {
        pendingRejoinDeviceSessionBuilder_.dispose();
        pendingRejoinDeviceSessionBuilder_ = null;
      }
      if (uplinkAdrHistoryBuilder_ == null) {
        uplinkAdrHistory_ = java.util.Collections.emptyList();
      } else {
        uplinkAdrHistory_ = null;
        uplinkAdrHistoryBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x40000000);
      internalGetMutableMacCommandErrorCount().clear();
      lastDeviceStatusRequest_ = null;
      if (lastDeviceStatusRequestBuilder_ != null) {
        lastDeviceStatusRequestBuilder_.dispose();
        lastDeviceStatusRequestBuilder_ = null;
      }
      rejoinRequestEnabled_ = false;
      rejoinRequestMaxCountN_ = 0;
      rejoinRequestMaxTimeN_ = 0;
      rejoinCount0_ = 0;
      uplinkDwellTime400Ms_ = false;
      downlinkDwellTime400Ms_ = false;
      uplinkMaxEirpIndex_ = 0;
      regionConfigId_ = "";
      relay_ = null;
      if (relayBuilder_ != null) {
        relayBuilder_.dispose();
        relayBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.chirpstack.internal.InternalProto.internal_static_internal_DeviceSession_descriptor;
    }

    @java.lang.Override
    public io.chirpstack.internal.DeviceSession getDefaultInstanceForType() {
      return io.chirpstack.internal.DeviceSession.getDefaultInstance();
    }

    @java.lang.Override
    public io.chirpstack.internal.DeviceSession build() {
      io.chirpstack.internal.DeviceSession result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.chirpstack.internal.DeviceSession buildPartial() {
      io.chirpstack.internal.DeviceSession result = new io.chirpstack.internal.DeviceSession(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      if (bitField1_ != 0) { buildPartial1(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.chirpstack.internal.DeviceSession result) {
      if (uplinkAdrHistoryBuilder_ == null) {
        if (((bitField0_ & 0x40000000) != 0)) {
          uplinkAdrHistory_ = java.util.Collections.unmodifiableList(uplinkAdrHistory_);
          bitField0_ = (bitField0_ & ~0x40000000);
        }
        result.uplinkAdrHistory_ = uplinkAdrHistory_;
      } else {
        result.uplinkAdrHistory_ = uplinkAdrHistoryBuilder_.build();
      }
    }

    private void buildPartial0(io.chirpstack.internal.DeviceSession result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.devEui_ = devEui_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.devAddr_ = devAddr_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.joinEui_ = joinEui_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.macVersion_ = macVersion_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.fNwkSIntKey_ = fNwkSIntKey_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.sNwkSIntKey_ = sNwkSIntKey_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.nwkSEncKey_ = nwkSEncKey_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.appSKey_ = appSKeyBuilder_ == null
            ? appSKey_
            : appSKeyBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.jsSessionKeyId_ = jsSessionKeyId_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.fCntUp_ = fCntUp_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.nFCntDown_ = nFCntDown_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.aFCntDown_ = aFCntDown_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.confFCnt_ = confFCnt_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.skipFCntCheck_ = skipFCntCheck_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.rx1Delay_ = rx1Delay_;
      }
      if (((from_bitField0_ & 0x00008000) != 0)) {
        result.rx1DrOffset_ = rx1DrOffset_;
      }
      if (((from_bitField0_ & 0x00010000) != 0)) {
        result.rx2Dr_ = rx2Dr_;
      }
      if (((from_bitField0_ & 0x00020000) != 0)) {
        result.rx2Frequency_ = rx2Frequency_;
      }
      if (((from_bitField0_ & 0x00040000) != 0)) {
        enabledUplinkChannelIndices_.makeImmutable();
        result.enabledUplinkChannelIndices_ = enabledUplinkChannelIndices_;
      }
      if (((from_bitField0_ & 0x00080000) != 0)) {
        result.extraUplinkChannels_ = internalGetExtraUplinkChannels().build(ExtraUplinkChannelsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00100000) != 0)) {
        result.classBPingSlotDr_ = classBPingSlotDr_;
      }
      if (((from_bitField0_ & 0x00200000) != 0)) {
        result.classBPingSlotFreq_ = classBPingSlotFreq_;
      }
      if (((from_bitField0_ & 0x00400000) != 0)) {
        result.classBPingSlotNb_ = classBPingSlotNb_;
      }
      if (((from_bitField0_ & 0x00800000) != 0)) {
        result.nbTrans_ = nbTrans_;
      }
      if (((from_bitField0_ & 0x01000000) != 0)) {
        result.txPowerIndex_ = txPowerIndex_;
      }
      if (((from_bitField0_ & 0x02000000) != 0)) {
        result.dr_ = dr_;
      }
      if (((from_bitField0_ & 0x04000000) != 0)) {
        result.adr_ = adr_;
      }
      if (((from_bitField0_ & 0x08000000) != 0)) {
        result.maxSupportedTxPowerIndex_ = maxSupportedTxPowerIndex_;
      }
      if (((from_bitField0_ & 0x10000000) != 0)) {
        result.minSupportedTxPowerIndex_ = minSupportedTxPowerIndex_;
      }
      if (((from_bitField0_ & 0x20000000) != 0)) {
        result.pendingRejoinDeviceSession_ = pendingRejoinDeviceSessionBuilder_ == null
            ? pendingRejoinDeviceSession_
            : pendingRejoinDeviceSessionBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x80000000) != 0)) {
        result.macCommandErrorCount_ = internalGetMacCommandErrorCount();
        result.macCommandErrorCount_.makeImmutable();
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartial1(io.chirpstack.internal.DeviceSession result) {
      int from_bitField1_ = bitField1_;
      int to_bitField0_ = 0;
      if (((from_bitField1_ & 0x00000001) != 0)) {
        result.lastDeviceStatusRequest_ = lastDeviceStatusRequestBuilder_ == null
            ? lastDeviceStatusRequest_
            : lastDeviceStatusRequestBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField1_ & 0x00000002) != 0)) {
        result.rejoinRequestEnabled_ = rejoinRequestEnabled_;
      }
      if (((from_bitField1_ & 0x00000004) != 0)) {
        result.rejoinRequestMaxCountN_ = rejoinRequestMaxCountN_;
      }
      if (((from_bitField1_ & 0x00000008) != 0)) {
        result.rejoinRequestMaxTimeN_ = rejoinRequestMaxTimeN_;
      }
      if (((from_bitField1_ & 0x00000010) != 0)) {
        result.rejoinCount0_ = rejoinCount0_;
      }
      if (((from_bitField1_ & 0x00000020) != 0)) {
        result.uplinkDwellTime400Ms_ = uplinkDwellTime400Ms_;
      }
      if (((from_bitField1_ & 0x00000040) != 0)) {
        result.downlinkDwellTime400Ms_ = downlinkDwellTime400Ms_;
      }
      if (((from_bitField1_ & 0x00000080) != 0)) {
        result.uplinkMaxEirpIndex_ = uplinkMaxEirpIndex_;
      }
      if (((from_bitField1_ & 0x00000100) != 0)) {
        result.regionConfigId_ = regionConfigId_;
      }
      if (((from_bitField1_ & 0x00000200) != 0)) {
        result.relay_ = relayBuilder_ == null
            ? relay_
            : relayBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.chirpstack.internal.DeviceSession) {
        return mergeFrom((io.chirpstack.internal.DeviceSession)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.chirpstack.internal.DeviceSession other) {
      if (other == io.chirpstack.internal.DeviceSession.getDefaultInstance()) return this;
      if (other.getDevEui() != com.google.protobuf.ByteString.EMPTY) {
        setDevEui(other.getDevEui());
      }
      if (other.getDevAddr() != com.google.protobuf.ByteString.EMPTY) {
        setDevAddr(other.getDevAddr());
      }
      if (other.getJoinEui() != com.google.protobuf.ByteString.EMPTY) {
        setJoinEui(other.getJoinEui());
      }
      if (other.macVersion_ != 0) {
        setMacVersionValue(other.getMacVersionValue());
      }
      if (other.getFNwkSIntKey() != com.google.protobuf.ByteString.EMPTY) {
        setFNwkSIntKey(other.getFNwkSIntKey());
      }
      if (other.getSNwkSIntKey() != com.google.protobuf.ByteString.EMPTY) {
        setSNwkSIntKey(other.getSNwkSIntKey());
      }
      if (other.getNwkSEncKey() != com.google.protobuf.ByteString.EMPTY) {
        setNwkSEncKey(other.getNwkSEncKey());
      }
      if (other.hasAppSKey()) {
        mergeAppSKey(other.getAppSKey());
      }
      if (other.getJsSessionKeyId() != com.google.protobuf.ByteString.EMPTY) {
        setJsSessionKeyId(other.getJsSessionKeyId());
      }
      if (other.getFCntUp() != 0) {
        setFCntUp(other.getFCntUp());
      }
      if (other.getNFCntDown() != 0) {
        setNFCntDown(other.getNFCntDown());
      }
      if (other.getAFCntDown() != 0) {
        setAFCntDown(other.getAFCntDown());
      }
      if (other.getConfFCnt() != 0) {
        setConfFCnt(other.getConfFCnt());
      }
      if (other.getSkipFCntCheck() != false) {
        setSkipFCntCheck(other.getSkipFCntCheck());
      }
      if (other.getRx1Delay() != 0) {
        setRx1Delay(other.getRx1Delay());
      }
      if (other.getRx1DrOffset() != 0) {
        setRx1DrOffset(other.getRx1DrOffset());
      }
      if (other.getRx2Dr() != 0) {
        setRx2Dr(other.getRx2Dr());
      }
      if (other.getRx2Frequency() != 0) {
        setRx2Frequency(other.getRx2Frequency());
      }
      if (!other.enabledUplinkChannelIndices_.isEmpty()) {
        if (enabledUplinkChannelIndices_.isEmpty()) {
          enabledUplinkChannelIndices_ = other.enabledUplinkChannelIndices_;
          enabledUplinkChannelIndices_.makeImmutable();
          bitField0_ |= 0x00040000;
        } else {
          ensureEnabledUplinkChannelIndicesIsMutable();
          enabledUplinkChannelIndices_.addAll(other.enabledUplinkChannelIndices_);
        }
        onChanged();
      }
      internalGetMutableExtraUplinkChannels().mergeFrom(
          other.internalGetExtraUplinkChannels());
      bitField0_ |= 0x00080000;
      if (other.getClassBPingSlotDr() != 0) {
        setClassBPingSlotDr(other.getClassBPingSlotDr());
      }
      if (other.getClassBPingSlotFreq() != 0) {
        setClassBPingSlotFreq(other.getClassBPingSlotFreq());
      }
      if (other.getClassBPingSlotNb() != 0) {
        setClassBPingSlotNb(other.getClassBPingSlotNb());
      }
      if (other.getNbTrans() != 0) {
        setNbTrans(other.getNbTrans());
      }
      if (other.getTxPowerIndex() != 0) {
        setTxPowerIndex(other.getTxPowerIndex());
      }
      if (other.getDr() != 0) {
        setDr(other.getDr());
      }
      if (other.getAdr() != false) {
        setAdr(other.getAdr());
      }
      if (other.getMaxSupportedTxPowerIndex() != 0) {
        setMaxSupportedTxPowerIndex(other.getMaxSupportedTxPowerIndex());
      }
      if (other.getMinSupportedTxPowerIndex() != 0) {
        setMinSupportedTxPowerIndex(other.getMinSupportedTxPowerIndex());
      }
      if (other.hasPendingRejoinDeviceSession()) {
        mergePendingRejoinDeviceSession(other.getPendingRejoinDeviceSession());
      }
      if (uplinkAdrHistoryBuilder_ == null) {
        if (!other.uplinkAdrHistory_.isEmpty()) {
          if (uplinkAdrHistory_.isEmpty()) {
            uplinkAdrHistory_ = other.uplinkAdrHistory_;
            bitField0_ = (bitField0_ & ~0x40000000);
          } else {
            ensureUplinkAdrHistoryIsMutable();
            uplinkAdrHistory_.addAll(other.uplinkAdrHistory_);
          }
          onChanged();
        }
      } else {
        if (!other.uplinkAdrHistory_.isEmpty()) {
          if (uplinkAdrHistoryBuilder_.isEmpty()) {
            uplinkAdrHistoryBuilder_.dispose();
            uplinkAdrHistoryBuilder_ = null;
            uplinkAdrHistory_ = other.uplinkAdrHistory_;
            bitField0_ = (bitField0_ & ~0x40000000);
            uplinkAdrHistoryBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getUplinkAdrHistoryFieldBuilder() : null;
          } else {
            uplinkAdrHistoryBuilder_.addAllMessages(other.uplinkAdrHistory_);
          }
        }
      }
      internalGetMutableMacCommandErrorCount().mergeFrom(
          other.internalGetMacCommandErrorCount());
      bitField0_ |= 0x80000000;
      if (other.hasLastDeviceStatusRequest()) {
        mergeLastDeviceStatusRequest(other.getLastDeviceStatusRequest());
      }
      if (other.getRejoinRequestEnabled() != false) {
        setRejoinRequestEnabled(other.getRejoinRequestEnabled());
      }
      if (other.getRejoinRequestMaxCountN() != 0) {
        setRejoinRequestMaxCountN(other.getRejoinRequestMaxCountN());
      }
      if (other.getRejoinRequestMaxTimeN() != 0) {
        setRejoinRequestMaxTimeN(other.getRejoinRequestMaxTimeN());
      }
      if (other.getRejoinCount0() != 0) {
        setRejoinCount0(other.getRejoinCount0());
      }
      if (other.getUplinkDwellTime400Ms() != false) {
        setUplinkDwellTime400Ms(other.getUplinkDwellTime400Ms());
      }
      if (other.getDownlinkDwellTime400Ms() != false) {
        setDownlinkDwellTime400Ms(other.getDownlinkDwellTime400Ms());
      }
      if (other.getUplinkMaxEirpIndex() != 0) {
        setUplinkMaxEirpIndex(other.getUplinkMaxEirpIndex());
      }
      if (!other.getRegionConfigId().isEmpty()) {
        regionConfigId_ = other.regionConfigId_;
        bitField1_ |= 0x00000100;
        onChanged();
      }
      if (other.hasRelay()) {
        mergeRelay(other.getRelay());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              devEui_ = input.readBytes();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              devAddr_ = input.readBytes();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              joinEui_ = input.readBytes();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 32: {
              macVersion_ = input.readEnum();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              fNwkSIntKey_ = input.readBytes();
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              sNwkSIntKey_ = input.readBytes();
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              nwkSEncKey_ = input.readBytes();
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getAppSKeyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 72: {
              fCntUp_ = input.readUInt32();
              bitField0_ |= 0x00000200;
              break;
            } // case 72
            case 80: {
              nFCntDown_ = input.readUInt32();
              bitField0_ |= 0x00000400;
              break;
            } // case 80
            case 88: {
              aFCntDown_ = input.readUInt32();
              bitField0_ |= 0x00000800;
              break;
            } // case 88
            case 96: {
              confFCnt_ = input.readUInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 96
            case 104: {
              skipFCntCheck_ = input.readBool();
              bitField0_ |= 0x00002000;
              break;
            } // case 104
            case 112: {
              rx1Delay_ = input.readUInt32();
              bitField0_ |= 0x00004000;
              break;
            } // case 112
            case 120: {
              rx1DrOffset_ = input.readUInt32();
              bitField0_ |= 0x00008000;
              break;
            } // case 120
            case 128: {
              rx2Dr_ = input.readUInt32();
              bitField0_ |= 0x00010000;
              break;
            } // case 128
            case 136: {
              rx2Frequency_ = input.readUInt32();
              bitField0_ |= 0x00020000;
              break;
            } // case 136
            case 144: {
              int v = input.readUInt32();
              ensureEnabledUplinkChannelIndicesIsMutable();
              enabledUplinkChannelIndices_.addInt(v);
              break;
            } // case 144
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureEnabledUplinkChannelIndicesIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                enabledUplinkChannelIndices_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            } // case 146
            case 154: {
              com.google.protobuf.MapEntry<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel>
              extraUplinkChannels__ = input.readMessage(
                  ExtraUplinkChannelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableExtraUplinkChannels().ensureBuilderMap().put(
                  extraUplinkChannels__.getKey(), extraUplinkChannels__.getValue());
              bitField0_ |= 0x00080000;
              break;
            } // case 154
            case 160: {
              classBPingSlotDr_ = input.readUInt32();
              bitField0_ |= 0x00100000;
              break;
            } // case 160
            case 168: {
              classBPingSlotFreq_ = input.readUInt32();
              bitField0_ |= 0x00200000;
              break;
            } // case 168
            case 176: {
              classBPingSlotNb_ = input.readUInt32();
              bitField0_ |= 0x00400000;
              break;
            } // case 176
            case 184: {
              nbTrans_ = input.readUInt32();
              bitField0_ |= 0x00800000;
              break;
            } // case 184
            case 192: {
              txPowerIndex_ = input.readUInt32();
              bitField0_ |= 0x01000000;
              break;
            } // case 192
            case 200: {
              dr_ = input.readUInt32();
              bitField0_ |= 0x02000000;
              break;
            } // case 200
            case 208: {
              adr_ = input.readBool();
              bitField0_ |= 0x04000000;
              break;
            } // case 208
            case 216: {
              maxSupportedTxPowerIndex_ = input.readUInt32();
              bitField0_ |= 0x08000000;
              break;
            } // case 216
            case 224: {
              minSupportedTxPowerIndex_ = input.readUInt32();
              bitField0_ |= 0x10000000;
              break;
            } // case 224
            case 234: {
              input.readMessage(
                  getPendingRejoinDeviceSessionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x20000000;
              break;
            } // case 234
            case 242: {
              io.chirpstack.internal.UplinkAdrHistory m =
                  input.readMessage(
                      io.chirpstack.internal.UplinkAdrHistory.parser(),
                      extensionRegistry);
              if (uplinkAdrHistoryBuilder_ == null) {
                ensureUplinkAdrHistoryIsMutable();
                uplinkAdrHistory_.add(m);
              } else {
                uplinkAdrHistoryBuilder_.addMessage(m);
              }
              break;
            } // case 242
            case 250: {
              com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
              macCommandErrorCount__ = input.readMessage(
                  MacCommandErrorCountDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableMacCommandErrorCount().getMutableMap().put(
                  macCommandErrorCount__.getKey(), macCommandErrorCount__.getValue());
              bitField0_ |= 0x80000000;
              break;
            } // case 250
            case 258: {
              input.readMessage(
                  getLastDeviceStatusRequestFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField1_ |= 0x00000001;
              break;
            } // case 258
            case 264: {
              rejoinRequestEnabled_ = input.readBool();
              bitField1_ |= 0x00000002;
              break;
            } // case 264
            case 272: {
              rejoinRequestMaxCountN_ = input.readUInt32();
              bitField1_ |= 0x00000004;
              break;
            } // case 272
            case 280: {
              rejoinRequestMaxTimeN_ = input.readUInt32();
              bitField1_ |= 0x00000008;
              break;
            } // case 280
            case 288: {
              rejoinCount0_ = input.readUInt32();
              bitField1_ |= 0x00000010;
              break;
            } // case 288
            case 296: {
              uplinkDwellTime400Ms_ = input.readBool();
              bitField1_ |= 0x00000020;
              break;
            } // case 296
            case 304: {
              downlinkDwellTime400Ms_ = input.readBool();
              bitField1_ |= 0x00000040;
              break;
            } // case 304
            case 312: {
              uplinkMaxEirpIndex_ = input.readUInt32();
              bitField1_ |= 0x00000080;
              break;
            } // case 312
            case 322: {
              regionConfigId_ = input.readStringRequireUtf8();
              bitField1_ |= 0x00000100;
              break;
            } // case 322
            case 330: {
              input.readMessage(
                  getRelayFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField1_ |= 0x00000200;
              break;
            } // case 330
            case 338: {
              jsSessionKeyId_ = input.readBytes();
              bitField0_ |= 0x00000100;
              break;
            } // case 338
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;
    private int bitField1_;

    private com.google.protobuf.ByteString devEui_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Device EUI.
     * </pre>
     *
     * <code>bytes dev_eui = 1;</code>
     * @return The devEui.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDevEui() {
      return devEui_;
    }
    /**
     * <pre>
     * Device EUI.
     * </pre>
     *
     * <code>bytes dev_eui = 1;</code>
     * @param value The devEui to set.
     * @return This builder for chaining.
     */
    public Builder setDevEui(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      devEui_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Device EUI.
     * </pre>
     *
     * <code>bytes dev_eui = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearDevEui() {
      bitField0_ = (bitField0_ & ~0x00000001);
      devEui_ = getDefaultInstance().getDevEui();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString devAddr_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Device address.
     * </pre>
     *
     * <code>bytes dev_addr = 2;</code>
     * @return The devAddr.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDevAddr() {
      return devAddr_;
    }
    /**
     * <pre>
     * Device address.
     * </pre>
     *
     * <code>bytes dev_addr = 2;</code>
     * @param value The devAddr to set.
     * @return This builder for chaining.
     */
    public Builder setDevAddr(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      devAddr_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Device address.
     * </pre>
     *
     * <code>bytes dev_addr = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDevAddr() {
      bitField0_ = (bitField0_ & ~0x00000002);
      devAddr_ = getDefaultInstance().getDevAddr();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString joinEui_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Join EUI.
     * </pre>
     *
     * <code>bytes join_eui = 3;</code>
     * @return The joinEui.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getJoinEui() {
      return joinEui_;
    }
    /**
     * <pre>
     * Join EUI.
     * </pre>
     *
     * <code>bytes join_eui = 3;</code>
     * @param value The joinEui to set.
     * @return This builder for chaining.
     */
    public Builder setJoinEui(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      joinEui_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join EUI.
     * </pre>
     *
     * <code>bytes join_eui = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearJoinEui() {
      bitField0_ = (bitField0_ & ~0x00000004);
      joinEui_ = getDefaultInstance().getJoinEui();
      onChanged();
      return this;
    }

    private int macVersion_ = 0;
    /**
     * <pre>
     * LoRaWAN mac-version.
     * </pre>
     *
     * <code>.common.MacVersion mac_version = 4;</code>
     * @return The enum numeric value on the wire for macVersion.
     */
    @java.lang.Override public int getMacVersionValue() {
      return macVersion_;
    }
    /**
     * <pre>
     * LoRaWAN mac-version.
     * </pre>
     *
     * <code>.common.MacVersion mac_version = 4;</code>
     * @param value The enum numeric value on the wire for macVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMacVersionValue(int value) {
      macVersion_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * LoRaWAN mac-version.
     * </pre>
     *
     * <code>.common.MacVersion mac_version = 4;</code>
     * @return The macVersion.
     */
    @java.lang.Override
    public io.chirpstack.api.MacVersion getMacVersion() {
      io.chirpstack.api.MacVersion result = io.chirpstack.api.MacVersion.forNumber(macVersion_);
      return result == null ? io.chirpstack.api.MacVersion.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * LoRaWAN mac-version.
     * </pre>
     *
     * <code>.common.MacVersion mac_version = 4;</code>
     * @param value The macVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMacVersion(io.chirpstack.api.MacVersion value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      macVersion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * LoRaWAN mac-version.
     * </pre>
     *
     * <code>.common.MacVersion mac_version = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMacVersion() {
      bitField0_ = (bitField0_ & ~0x00000008);
      macVersion_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString fNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * FNwkSIntKey.
     * </pre>
     *
     * <code>bytes f_nwk_s_int_key = 5;</code>
     * @return The fNwkSIntKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFNwkSIntKey() {
      return fNwkSIntKey_;
    }
    /**
     * <pre>
     * FNwkSIntKey.
     * </pre>
     *
     * <code>bytes f_nwk_s_int_key = 5;</code>
     * @param value The fNwkSIntKey to set.
     * @return This builder for chaining.
     */
    public Builder setFNwkSIntKey(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      fNwkSIntKey_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * FNwkSIntKey.
     * </pre>
     *
     * <code>bytes f_nwk_s_int_key = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearFNwkSIntKey() {
      bitField0_ = (bitField0_ & ~0x00000010);
      fNwkSIntKey_ = getDefaultInstance().getFNwkSIntKey();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString sNwkSIntKey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * SNwkSIntKey.
     * </pre>
     *
     * <code>bytes s_nwk_s_int_key = 6;</code>
     * @return The sNwkSIntKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSNwkSIntKey() {
      return sNwkSIntKey_;
    }
    /**
     * <pre>
     * SNwkSIntKey.
     * </pre>
     *
     * <code>bytes s_nwk_s_int_key = 6;</code>
     * @param value The sNwkSIntKey to set.
     * @return This builder for chaining.
     */
    public Builder setSNwkSIntKey(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      sNwkSIntKey_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SNwkSIntKey.
     * </pre>
     *
     * <code>bytes s_nwk_s_int_key = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSNwkSIntKey() {
      bitField0_ = (bitField0_ & ~0x00000020);
      sNwkSIntKey_ = getDefaultInstance().getSNwkSIntKey();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString nwkSEncKey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * NwkSEncKey.
     * </pre>
     *
     * <code>bytes nwk_s_enc_key = 7;</code>
     * @return The nwkSEncKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNwkSEncKey() {
      return nwkSEncKey_;
    }
    /**
     * <pre>
     * NwkSEncKey.
     * </pre>
     *
     * <code>bytes nwk_s_enc_key = 7;</code>
     * @param value The nwkSEncKey to set.
     * @return This builder for chaining.
     */
    public Builder setNwkSEncKey(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      nwkSEncKey_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NwkSEncKey.
     * </pre>
     *
     * <code>bytes nwk_s_enc_key = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearNwkSEncKey() {
      bitField0_ = (bitField0_ & ~0x00000040);
      nwkSEncKey_ = getDefaultInstance().getNwkSEncKey();
      onChanged();
      return this;
    }

    private io.chirpstack.api.KeyEnvelope appSKey_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.chirpstack.api.KeyEnvelope, io.chirpstack.api.KeyEnvelope.Builder, io.chirpstack.api.KeyEnvelopeOrBuilder> appSKeyBuilder_;
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     * @return Whether the appSKey field is set.
     */
    public boolean hasAppSKey() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     * @return The appSKey.
     */
    public io.chirpstack.api.KeyEnvelope getAppSKey() {
      if (appSKeyBuilder_ == null) {
        return appSKey_ == null ? io.chirpstack.api.KeyEnvelope.getDefaultInstance() : appSKey_;
      } else {
        return appSKeyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    public Builder setAppSKey(io.chirpstack.api.KeyEnvelope value) {
      if (appSKeyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        appSKey_ = value;
      } else {
        appSKeyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    public Builder setAppSKey(
        io.chirpstack.api.KeyEnvelope.Builder builderForValue) {
      if (appSKeyBuilder_ == null) {
        appSKey_ = builderForValue.build();
      } else {
        appSKeyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    public Builder mergeAppSKey(io.chirpstack.api.KeyEnvelope value) {
      if (appSKeyBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          appSKey_ != null &&
          appSKey_ != io.chirpstack.api.KeyEnvelope.getDefaultInstance()) {
          getAppSKeyBuilder().mergeFrom(value);
        } else {
          appSKey_ = value;
        }
      } else {
        appSKeyBuilder_.mergeFrom(value);
      }
      if (appSKey_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    public Builder clearAppSKey() {
      bitField0_ = (bitField0_ & ~0x00000080);
      appSKey_ = null;
      if (appSKeyBuilder_ != null) {
        appSKeyBuilder_.dispose();
        appSKeyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    public io.chirpstack.api.KeyEnvelope.Builder getAppSKeyBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getAppSKeyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    public io.chirpstack.api.KeyEnvelopeOrBuilder getAppSKeyOrBuilder() {
      if (appSKeyBuilder_ != null) {
        return appSKeyBuilder_.getMessageOrBuilder();
      } else {
        return appSKey_ == null ?
            io.chirpstack.api.KeyEnvelope.getDefaultInstance() : appSKey_;
      }
    }
    /**
     * <pre>
     * AppSKey envelope.
     * </pre>
     *
     * <code>.common.KeyEnvelope app_s_key = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.chirpstack.api.KeyEnvelope, io.chirpstack.api.KeyEnvelope.Builder, io.chirpstack.api.KeyEnvelopeOrBuilder> 
        getAppSKeyFieldBuilder() {
      if (appSKeyBuilder_ == null) {
        appSKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.chirpstack.api.KeyEnvelope, io.chirpstack.api.KeyEnvelope.Builder, io.chirpstack.api.KeyEnvelopeOrBuilder>(
                getAppSKey(),
                getParentForChildren(),
                isClean());
        appSKey_ = null;
      }
      return appSKeyBuilder_;
    }

    private com.google.protobuf.ByteString jsSessionKeyId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * JS Session Key ID.
     * </pre>
     *
     * <code>bytes js_session_key_id = 42;</code>
     * @return The jsSessionKeyId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getJsSessionKeyId() {
      return jsSessionKeyId_;
    }
    /**
     * <pre>
     * JS Session Key ID.
     * </pre>
     *
     * <code>bytes js_session_key_id = 42;</code>
     * @param value The jsSessionKeyId to set.
     * @return This builder for chaining.
     */
    public Builder setJsSessionKeyId(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      jsSessionKeyId_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JS Session Key ID.
     * </pre>
     *
     * <code>bytes js_session_key_id = 42;</code>
     * @return This builder for chaining.
     */
    public Builder clearJsSessionKeyId() {
      bitField0_ = (bitField0_ & ~0x00000100);
      jsSessionKeyId_ = getDefaultInstance().getJsSessionKeyId();
      onChanged();
      return this;
    }

    private int fCntUp_ ;
    /**
     * <pre>
     * Uplink frame-counter.
     * </pre>
     *
     * <code>uint32 f_cnt_up = 9;</code>
     * @return The fCntUp.
     */
    @java.lang.Override
    public int getFCntUp() {
      return fCntUp_;
    }
    /**
     * <pre>
     * Uplink frame-counter.
     * </pre>
     *
     * <code>uint32 f_cnt_up = 9;</code>
     * @param value The fCntUp to set.
     * @return This builder for chaining.
     */
    public Builder setFCntUp(int value) {

      fCntUp_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Uplink frame-counter.
     * </pre>
     *
     * <code>uint32 f_cnt_up = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearFCntUp() {
      bitField0_ = (bitField0_ & ~0x00000200);
      fCntUp_ = 0;
      onChanged();
      return this;
    }

    private int nFCntDown_ ;
    /**
     * <pre>
     * Downlink frame-counter (ns).
     * </pre>
     *
     * <code>uint32 n_f_cnt_down = 10;</code>
     * @return The nFCntDown.
     */
    @java.lang.Override
    public int getNFCntDown() {
      return nFCntDown_;
    }
    /**
     * <pre>
     * Downlink frame-counter (ns).
     * </pre>
     *
     * <code>uint32 n_f_cnt_down = 10;</code>
     * @param value The nFCntDown to set.
     * @return This builder for chaining.
     */
    public Builder setNFCntDown(int value) {

      nFCntDown_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Downlink frame-counter (ns).
     * </pre>
     *
     * <code>uint32 n_f_cnt_down = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearNFCntDown() {
      bitField0_ = (bitField0_ & ~0x00000400);
      nFCntDown_ = 0;
      onChanged();
      return this;
    }

    private int aFCntDown_ ;
    /**
     * <pre>
     * Downlink frame-counter (as).
     * </pre>
     *
     * <code>uint32 a_f_cnt_down = 11;</code>
     * @return The aFCntDown.
     */
    @java.lang.Override
    public int getAFCntDown() {
      return aFCntDown_;
    }
    /**
     * <pre>
     * Downlink frame-counter (as).
     * </pre>
     *
     * <code>uint32 a_f_cnt_down = 11;</code>
     * @param value The aFCntDown to set.
     * @return This builder for chaining.
     */
    public Builder setAFCntDown(int value) {

      aFCntDown_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Downlink frame-counter (as).
     * </pre>
     *
     * <code>uint32 a_f_cnt_down = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearAFCntDown() {
      bitField0_ = (bitField0_ & ~0x00000800);
      aFCntDown_ = 0;
      onChanged();
      return this;
    }

    private int confFCnt_ ;
    /**
     * <pre>
     * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or
     * a_f_cnt_down).
     * </pre>
     *
     * <code>uint32 conf_f_cnt = 12;</code>
     * @return The confFCnt.
     */
    @java.lang.Override
    public int getConfFCnt() {
      return confFCnt_;
    }
    /**
     * <pre>
     * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or
     * a_f_cnt_down).
     * </pre>
     *
     * <code>uint32 conf_f_cnt = 12;</code>
     * @param value The confFCnt to set.
     * @return This builder for chaining.
     */
    public Builder setConfFCnt(int value) {

      confFCnt_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or
     * a_f_cnt_down).
     * </pre>
     *
     * <code>uint32 conf_f_cnt = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearConfFCnt() {
      bitField0_ = (bitField0_ & ~0x00001000);
      confFCnt_ = 0;
      onChanged();
      return this;
    }

    private boolean skipFCntCheck_ ;
    /**
     * <pre>
     * Skip uplink frame-counter validation.
     * </pre>
     *
     * <code>bool skip_f_cnt_check = 13;</code>
     * @return The skipFCntCheck.
     */
    @java.lang.Override
    public boolean getSkipFCntCheck() {
      return skipFCntCheck_;
    }
    /**
     * <pre>
     * Skip uplink frame-counter validation.
     * </pre>
     *
     * <code>bool skip_f_cnt_check = 13;</code>
     * @param value The skipFCntCheck to set.
     * @return This builder for chaining.
     */
    public Builder setSkipFCntCheck(boolean value) {

      skipFCntCheck_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Skip uplink frame-counter validation.
     * </pre>
     *
     * <code>bool skip_f_cnt_check = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearSkipFCntCheck() {
      bitField0_ = (bitField0_ & ~0x00002000);
      skipFCntCheck_ = false;
      onChanged();
      return this;
    }

    private int rx1Delay_ ;
    /**
     * <pre>
     * RX1 delay.
     * </pre>
     *
     * <code>uint32 rx1_delay = 14;</code>
     * @return The rx1Delay.
     */
    @java.lang.Override
    public int getRx1Delay() {
      return rx1Delay_;
    }
    /**
     * <pre>
     * RX1 delay.
     * </pre>
     *
     * <code>uint32 rx1_delay = 14;</code>
     * @param value The rx1Delay to set.
     * @return This builder for chaining.
     */
    public Builder setRx1Delay(int value) {

      rx1Delay_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RX1 delay.
     * </pre>
     *
     * <code>uint32 rx1_delay = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearRx1Delay() {
      bitField0_ = (bitField0_ & ~0x00004000);
      rx1Delay_ = 0;
      onChanged();
      return this;
    }

    private int rx1DrOffset_ ;
    /**
     * <pre>
     * RX1 data-rate offset.
     * </pre>
     *
     * <code>uint32 rx1_dr_offset = 15;</code>
     * @return The rx1DrOffset.
     */
    @java.lang.Override
    public int getRx1DrOffset() {
      return rx1DrOffset_;
    }
    /**
     * <pre>
     * RX1 data-rate offset.
     * </pre>
     *
     * <code>uint32 rx1_dr_offset = 15;</code>
     * @param value The rx1DrOffset to set.
     * @return This builder for chaining.
     */
    public Builder setRx1DrOffset(int value) {

      rx1DrOffset_ = value;
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RX1 data-rate offset.
     * </pre>
     *
     * <code>uint32 rx1_dr_offset = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearRx1DrOffset() {
      bitField0_ = (bitField0_ & ~0x00008000);
      rx1DrOffset_ = 0;
      onChanged();
      return this;
    }

    private int rx2Dr_ ;
    /**
     * <pre>
     * RX2 data-rate.
     * </pre>
     *
     * <code>uint32 rx2_dr = 16;</code>
     * @return The rx2Dr.
     */
    @java.lang.Override
    public int getRx2Dr() {
      return rx2Dr_;
    }
    /**
     * <pre>
     * RX2 data-rate.
     * </pre>
     *
     * <code>uint32 rx2_dr = 16;</code>
     * @param value The rx2Dr to set.
     * @return This builder for chaining.
     */
    public Builder setRx2Dr(int value) {

      rx2Dr_ = value;
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RX2 data-rate.
     * </pre>
     *
     * <code>uint32 rx2_dr = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearRx2Dr() {
      bitField0_ = (bitField0_ & ~0x00010000);
      rx2Dr_ = 0;
      onChanged();
      return this;
    }

    private int rx2Frequency_ ;
    /**
     * <pre>
     * RX2 frequency.
     * </pre>
     *
     * <code>uint32 rx2_frequency = 17;</code>
     * @return The rx2Frequency.
     */
    @java.lang.Override
    public int getRx2Frequency() {
      return rx2Frequency_;
    }
    /**
     * <pre>
     * RX2 frequency.
     * </pre>
     *
     * <code>uint32 rx2_frequency = 17;</code>
     * @param value The rx2Frequency to set.
     * @return This builder for chaining.
     */
    public Builder setRx2Frequency(int value) {

      rx2Frequency_ = value;
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RX2 frequency.
     * </pre>
     *
     * <code>uint32 rx2_frequency = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearRx2Frequency() {
      bitField0_ = (bitField0_ & ~0x00020000);
      rx2Frequency_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList enabledUplinkChannelIndices_ = emptyIntList();
    private void ensureEnabledUplinkChannelIndicesIsMutable() {
      if (!enabledUplinkChannelIndices_.isModifiable()) {
        enabledUplinkChannelIndices_ = makeMutableCopy(enabledUplinkChannelIndices_);
      }
      bitField0_ |= 0x00040000;
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @return A list containing the enabledUplinkChannelIndices.
     */
    public java.util.List<java.lang.Integer>
        getEnabledUplinkChannelIndicesList() {
      enabledUplinkChannelIndices_.makeImmutable();
      return enabledUplinkChannelIndices_;
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @return The count of enabledUplinkChannelIndices.
     */
    public int getEnabledUplinkChannelIndicesCount() {
      return enabledUplinkChannelIndices_.size();
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @param index The index of the element to return.
     * @return The enabledUplinkChannelIndices at the given index.
     */
    public int getEnabledUplinkChannelIndices(int index) {
      return enabledUplinkChannelIndices_.getInt(index);
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @param index The index to set the value at.
     * @param value The enabledUplinkChannelIndices to set.
     * @return This builder for chaining.
     */
    public Builder setEnabledUplinkChannelIndices(
        int index, int value) {

      ensureEnabledUplinkChannelIndicesIsMutable();
      enabledUplinkChannelIndices_.setInt(index, value);
      bitField0_ |= 0x00040000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @param value The enabledUplinkChannelIndices to add.
     * @return This builder for chaining.
     */
    public Builder addEnabledUplinkChannelIndices(int value) {

      ensureEnabledUplinkChannelIndicesIsMutable();
      enabledUplinkChannelIndices_.addInt(value);
      bitField0_ |= 0x00040000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @param values The enabledUplinkChannelIndices to add.
     * @return This builder for chaining.
     */
    public Builder addAllEnabledUplinkChannelIndices(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureEnabledUplinkChannelIndicesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, enabledUplinkChannelIndices_);
      bitField0_ |= 0x00040000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enabled uplink channels.
     * </pre>
     *
     * <code>repeated uint32 enabled_uplink_channel_indices = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnabledUplinkChannelIndices() {
      enabledUplinkChannelIndices_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00040000);
      onChanged();
      return this;
    }

    private static final class ExtraUplinkChannelsConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder, io.chirpstack.internal.DeviceSessionChannel> {
      @java.lang.Override
      public io.chirpstack.internal.DeviceSessionChannel build(io.chirpstack.internal.DeviceSessionChannelOrBuilder val) {
        if (val instanceof io.chirpstack.internal.DeviceSessionChannel) { return (io.chirpstack.internal.DeviceSessionChannel) val; }
        return ((io.chirpstack.internal.DeviceSessionChannel.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> defaultEntry() {
        return ExtraUplinkChannelsDefaultEntryHolder.defaultEntry;
      }
    };
    private static final ExtraUplinkChannelsConverter extraUplinkChannelsConverter = new ExtraUplinkChannelsConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder, io.chirpstack.internal.DeviceSessionChannel, io.chirpstack.internal.DeviceSessionChannel.Builder> extraUplinkChannels_;
    private com.google.protobuf.MapFieldBuilder<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder, io.chirpstack.internal.DeviceSessionChannel, io.chirpstack.internal.DeviceSessionChannel.Builder>
        internalGetExtraUplinkChannels() {
      if (extraUplinkChannels_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(extraUplinkChannelsConverter);
      }
      return extraUplinkChannels_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder, io.chirpstack.internal.DeviceSessionChannel, io.chirpstack.internal.DeviceSessionChannel.Builder>
        internalGetMutableExtraUplinkChannels() {
      if (extraUplinkChannels_ == null) {
        extraUplinkChannels_ = new com.google.protobuf.MapFieldBuilder<>(extraUplinkChannelsConverter);
      }
      bitField0_ |= 0x00080000;
      onChanged();
      return extraUplinkChannels_;
    }
    public int getExtraUplinkChannelsCount() {
      return internalGetExtraUplinkChannels().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    @java.lang.Override
    public boolean containsExtraUplinkChannels(
        int key) {

      return internalGetExtraUplinkChannels().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getExtraUplinkChannelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> getExtraUplinkChannels() {
      return getExtraUplinkChannelsMap();
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> getExtraUplinkChannelsMap() {
      return internalGetExtraUplinkChannels().getImmutableMap();
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    @java.lang.Override
    public /* nullable */
io.chirpstack.internal.DeviceSessionChannel getExtraUplinkChannelsOrDefault(
        int key,
        /* nullable */
io.chirpstack.internal.DeviceSessionChannel defaultValue) {

      java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder> map = internalGetMutableExtraUplinkChannels().ensureBuilderMap();
      return map.containsKey(key) ? extraUplinkChannelsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    @java.lang.Override
    public io.chirpstack.internal.DeviceSessionChannel getExtraUplinkChannelsOrThrow(
        int key) {

      java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder> map = internalGetMutableExtraUplinkChannels().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return extraUplinkChannelsConverter.build(map.get(key));
    }
    public Builder clearExtraUplinkChannels() {
      bitField0_ = (bitField0_ & ~0x00080000);
      internalGetMutableExtraUplinkChannels().clear();
      return this;
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    public Builder removeExtraUplinkChannels(
        int key) {

      internalGetMutableExtraUplinkChannels().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel>
        getMutableExtraUplinkChannels() {
      bitField0_ |= 0x00080000;
      return internalGetMutableExtraUplinkChannels().ensureMessageMap();
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    public Builder putExtraUplinkChannels(
        int key,
        io.chirpstack.internal.DeviceSessionChannel value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableExtraUplinkChannels().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00080000;
      return this;
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    public Builder putAllExtraUplinkChannels(
        java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> values) {
      for (java.util.Map.Entry<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannel> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableExtraUplinkChannels().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00080000;
      return this;
    }
    /**
     * <pre>
     * Extra user-defined uplink channels.
     * </pre>
     *
     * <code>map&lt;uint32, .internal.DeviceSessionChannel&gt; extra_uplink_channels = 19;</code>
     */
    public io.chirpstack.internal.DeviceSessionChannel.Builder putExtraUplinkChannelsBuilderIfAbsent(
        int key) {
      java.util.Map<java.lang.Integer, io.chirpstack.internal.DeviceSessionChannelOrBuilder> builderMap = internalGetMutableExtraUplinkChannels().ensureBuilderMap();
      io.chirpstack.internal.DeviceSessionChannelOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = io.chirpstack.internal.DeviceSessionChannel.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof io.chirpstack.internal.DeviceSessionChannel) {
        entry = ((io.chirpstack.internal.DeviceSessionChannel) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (io.chirpstack.internal.DeviceSessionChannel.Builder) entry;
    }

    private int classBPingSlotDr_ ;
    /**
     * <pre>
     * Class-B ping-slot data-rate.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_dr = 20;</code>
     * @return The classBPingSlotDr.
     */
    @java.lang.Override
    public int getClassBPingSlotDr() {
      return classBPingSlotDr_;
    }
    /**
     * <pre>
     * Class-B ping-slot data-rate.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_dr = 20;</code>
     * @param value The classBPingSlotDr to set.
     * @return This builder for chaining.
     */
    public Builder setClassBPingSlotDr(int value) {

      classBPingSlotDr_ = value;
      bitField0_ |= 0x00100000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Class-B ping-slot data-rate.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_dr = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearClassBPingSlotDr() {
      bitField0_ = (bitField0_ & ~0x00100000);
      classBPingSlotDr_ = 0;
      onChanged();
      return this;
    }

    private int classBPingSlotFreq_ ;
    /**
     * <pre>
     * Class-B ping-slot frequency.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_freq = 21;</code>
     * @return The classBPingSlotFreq.
     */
    @java.lang.Override
    public int getClassBPingSlotFreq() {
      return classBPingSlotFreq_;
    }
    /**
     * <pre>
     * Class-B ping-slot frequency.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_freq = 21;</code>
     * @param value The classBPingSlotFreq to set.
     * @return This builder for chaining.
     */
    public Builder setClassBPingSlotFreq(int value) {

      classBPingSlotFreq_ = value;
      bitField0_ |= 0x00200000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Class-B ping-slot frequency.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_freq = 21;</code>
     * @return This builder for chaining.
     */
    public Builder clearClassBPingSlotFreq() {
      bitField0_ = (bitField0_ & ~0x00200000);
      classBPingSlotFreq_ = 0;
      onChanged();
      return this;
    }

    private int classBPingSlotNb_ ;
    /**
     * <pre>
     * Class-B ping-slot nb.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_nb = 22;</code>
     * @return The classBPingSlotNb.
     */
    @java.lang.Override
    public int getClassBPingSlotNb() {
      return classBPingSlotNb_;
    }
    /**
     * <pre>
     * Class-B ping-slot nb.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_nb = 22;</code>
     * @param value The classBPingSlotNb to set.
     * @return This builder for chaining.
     */
    public Builder setClassBPingSlotNb(int value) {

      classBPingSlotNb_ = value;
      bitField0_ |= 0x00400000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Class-B ping-slot nb.
     * </pre>
     *
     * <code>uint32 class_b_ping_slot_nb = 22;</code>
     * @return This builder for chaining.
     */
    public Builder clearClassBPingSlotNb() {
      bitField0_ = (bitField0_ & ~0x00400000);
      classBPingSlotNb_ = 0;
      onChanged();
      return this;
    }

    private int nbTrans_ ;
    /**
     * <pre>
     * Nb. transmissions.
     * </pre>
     *
     * <code>uint32 nb_trans = 23;</code>
     * @return The nbTrans.
     */
    @java.lang.Override
    public int getNbTrans() {
      return nbTrans_;
    }
    /**
     * <pre>
     * Nb. transmissions.
     * </pre>
     *
     * <code>uint32 nb_trans = 23;</code>
     * @param value The nbTrans to set.
     * @return This builder for chaining.
     */
    public Builder setNbTrans(int value) {

      nbTrans_ = value;
      bitField0_ |= 0x00800000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Nb. transmissions.
     * </pre>
     *
     * <code>uint32 nb_trans = 23;</code>
     * @return This builder for chaining.
     */
    public Builder clearNbTrans() {
      bitField0_ = (bitField0_ & ~0x00800000);
      nbTrans_ = 0;
      onChanged();
      return this;
    }

    private int txPowerIndex_ ;
    /**
     * <pre>
     * TXPowerIndex which the node is using. The possible values are defined
     * by the lorawan/band package and are region specific. By default it is
     * assumed that the node is using TXPower 0. This value is controlled by
     * the ADR engine.
     * </pre>
     *
     * <code>uint32 tx_power_index = 24;</code>
     * @return The txPowerIndex.
     */
    @java.lang.Override
    public int getTxPowerIndex() {
      return txPowerIndex_;
    }
    /**
     * <pre>
     * TXPowerIndex which the node is using. The possible values are defined
     * by the lorawan/band package and are region specific. By default it is
     * assumed that the node is using TXPower 0. This value is controlled by
     * the ADR engine.
     * </pre>
     *
     * <code>uint32 tx_power_index = 24;</code>
     * @param value The txPowerIndex to set.
     * @return This builder for chaining.
     */
    public Builder setTxPowerIndex(int value) {

      txPowerIndex_ = value;
      bitField0_ |= 0x01000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * TXPowerIndex which the node is using. The possible values are defined
     * by the lorawan/band package and are region specific. By default it is
     * assumed that the node is using TXPower 0. This value is controlled by
     * the ADR engine.
     * </pre>
     *
     * <code>uint32 tx_power_index = 24;</code>
     * @return This builder for chaining.
     */
    public Builder clearTxPowerIndex() {
      bitField0_ = (bitField0_ & ~0x01000000);
      txPowerIndex_ = 0;
      onChanged();
      return this;
    }

    private int dr_ ;
    /**
     * <pre>
     * DR defines the (last known) data-rate at which the node is operating.
     * This value is controlled by the ADR engine.
     * </pre>
     *
     * <code>uint32 dr = 25;</code>
     * @return The dr.
     */
    @java.lang.Override
    public int getDr() {
      return dr_;
    }
    /**
     * <pre>
     * DR defines the (last known) data-rate at which the node is operating.
     * This value is controlled by the ADR engine.
     * </pre>
     *
     * <code>uint32 dr = 25;</code>
     * @param value The dr to set.
     * @return This builder for chaining.
     */
    public Builder setDr(int value) {

      dr_ = value;
      bitField0_ |= 0x02000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DR defines the (last known) data-rate at which the node is operating.
     * This value is controlled by the ADR engine.
     * </pre>
     *
     * <code>uint32 dr = 25;</code>
     * @return This builder for chaining.
     */
    public Builder clearDr() {
      bitField0_ = (bitField0_ & ~0x02000000);
      dr_ = 0;
      onChanged();
      return this;
    }

    private boolean adr_ ;
    /**
     * <pre>
     * ADR defines if the device has ADR enabled.
     * </pre>
     *
     * <code>bool adr = 26;</code>
     * @return The adr.
     */
    @java.lang.Override
    public boolean getAdr() {
      return adr_;
    }
    /**
     * <pre>
     * ADR defines if the device has ADR enabled.
     * </pre>
     *
     * <code>bool adr = 26;</code>
     * @param value The adr to set.
     * @return This builder for chaining.
     */
    public Builder setAdr(boolean value) {

      adr_ = value;
      bitField0_ |= 0x04000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ADR defines if the device has ADR enabled.
     * </pre>
     *
     * <code>bool adr = 26;</code>
     * @return This builder for chaining.
     */
    public Builder clearAdr() {
      bitField0_ = (bitField0_ & ~0x04000000);
      adr_ = false;
      onChanged();
      return this;
    }

    private int maxSupportedTxPowerIndex_ ;
    /**
     * <pre>
     * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     * by the node, or 0 when not set.
     * </pre>
     *
     * <code>uint32 max_supported_tx_power_index = 27;</code>
     * @return The maxSupportedTxPowerIndex.
     */
    @java.lang.Override
    public int getMaxSupportedTxPowerIndex() {
      return maxSupportedTxPowerIndex_;
    }
    /**
     * <pre>
     * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     * by the node, or 0 when not set.
     * </pre>
     *
     * <code>uint32 max_supported_tx_power_index = 27;</code>
     * @param value The maxSupportedTxPowerIndex to set.
     * @return This builder for chaining.
     */
    public Builder setMaxSupportedTxPowerIndex(int value) {

      maxSupportedTxPowerIndex_ = value;
      bitField0_ |= 0x08000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     * by the node, or 0 when not set.
     * </pre>
     *
     * <code>uint32 max_supported_tx_power_index = 27;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxSupportedTxPowerIndex() {
      bitField0_ = (bitField0_ & ~0x08000000);
      maxSupportedTxPowerIndex_ = 0;
      onChanged();
      return this;
    }

    private int minSupportedTxPowerIndex_ ;
    /**
     * <pre>
     * MinSupportedTXPowerIndex defines the minimum supported tx-power index
     * by the node (default 0).
     * </pre>
     *
     * <code>uint32 min_supported_tx_power_index = 28;</code>
     * @return The minSupportedTxPowerIndex.
     */
    @java.lang.Override
    public int getMinSupportedTxPowerIndex() {
      return minSupportedTxPowerIndex_;
    }
    /**
     * <pre>
     * MinSupportedTXPowerIndex defines the minimum supported tx-power index
     * by the node (default 0).
     * </pre>
     *
     * <code>uint32 min_supported_tx_power_index = 28;</code>
     * @param value The minSupportedTxPowerIndex to set.
     * @return This builder for chaining.
     */
    public Builder setMinSupportedTxPowerIndex(int value) {

      minSupportedTxPowerIndex_ = value;
      bitField0_ |= 0x10000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MinSupportedTXPowerIndex defines the minimum supported tx-power index
     * by the node (default 0).
     * </pre>
     *
     * <code>uint32 min_supported_tx_power_index = 28;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinSupportedTxPowerIndex() {
      bitField0_ = (bitField0_ & ~0x10000000);
      minSupportedTxPowerIndex_ = 0;
      onChanged();
      return this;
    }

    private io.chirpstack.internal.DeviceSession pendingRejoinDeviceSession_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.chirpstack.internal.DeviceSession, io.chirpstack.internal.DeviceSession.Builder, io.chirpstack.internal.DeviceSessionOrBuilder> pendingRejoinDeviceSessionBuilder_;
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     * @return Whether the pendingRejoinDeviceSession field is set.
     */
    public boolean hasPendingRejoinDeviceSession() {
      return ((bitField0_ & 0x20000000) != 0);
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     * @return The pendingRejoinDeviceSession.
     */
    public io.chirpstack.internal.DeviceSession getPendingRejoinDeviceSession() {
      if (pendingRejoinDeviceSessionBuilder_ == null) {
        return pendingRejoinDeviceSession_ == null ? io.chirpstack.internal.DeviceSession.getDefaultInstance() : pendingRejoinDeviceSession_;
      } else {
        return pendingRejoinDeviceSessionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    public Builder setPendingRejoinDeviceSession(io.chirpstack.internal.DeviceSession value) {
      if (pendingRejoinDeviceSessionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pendingRejoinDeviceSession_ = value;
      } else {
        pendingRejoinDeviceSessionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x20000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    public Builder setPendingRejoinDeviceSession(
        io.chirpstack.internal.DeviceSession.Builder builderForValue) {
      if (pendingRejoinDeviceSessionBuilder_ == null) {
        pendingRejoinDeviceSession_ = builderForValue.build();
      } else {
        pendingRejoinDeviceSessionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x20000000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    public Builder mergePendingRejoinDeviceSession(io.chirpstack.internal.DeviceSession value) {
      if (pendingRejoinDeviceSessionBuilder_ == null) {
        if (((bitField0_ & 0x20000000) != 0) &&
          pendingRejoinDeviceSession_ != null &&
          pendingRejoinDeviceSession_ != io.chirpstack.internal.DeviceSession.getDefaultInstance()) {
          getPendingRejoinDeviceSessionBuilder().mergeFrom(value);
        } else {
          pendingRejoinDeviceSession_ = value;
        }
      } else {
        pendingRejoinDeviceSessionBuilder_.mergeFrom(value);
      }
      if (pendingRejoinDeviceSession_ != null) {
        bitField0_ |= 0x20000000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    public Builder clearPendingRejoinDeviceSession() {
      bitField0_ = (bitField0_ & ~0x20000000);
      pendingRejoinDeviceSession_ = null;
      if (pendingRejoinDeviceSessionBuilder_ != null) {
        pendingRejoinDeviceSessionBuilder_.dispose();
        pendingRejoinDeviceSessionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    public io.chirpstack.internal.DeviceSession.Builder getPendingRejoinDeviceSessionBuilder() {
      bitField0_ |= 0x20000000;
      onChanged();
      return getPendingRejoinDeviceSessionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    public io.chirpstack.internal.DeviceSessionOrBuilder getPendingRejoinDeviceSessionOrBuilder() {
      if (pendingRejoinDeviceSessionBuilder_ != null) {
        return pendingRejoinDeviceSessionBuilder_.getMessageOrBuilder();
      } else {
        return pendingRejoinDeviceSession_ == null ?
            io.chirpstack.internal.DeviceSession.getDefaultInstance() : pendingRejoinDeviceSession_;
      }
    }
    /**
     * <pre>
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     * </pre>
     *
     * <code>.internal.DeviceSession pending_rejoin_device_session = 29;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.chirpstack.internal.DeviceSession, io.chirpstack.internal.DeviceSession.Builder, io.chirpstack.internal.DeviceSessionOrBuilder> 
        getPendingRejoinDeviceSessionFieldBuilder() {
      if (pendingRejoinDeviceSessionBuilder_ == null) {
        pendingRejoinDeviceSessionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.chirpstack.internal.DeviceSession, io.chirpstack.internal.DeviceSession.Builder, io.chirpstack.internal.DeviceSessionOrBuilder>(
                getPendingRejoinDeviceSession(),
                getParentForChildren(),
                isClean());
        pendingRejoinDeviceSession_ = null;
      }
      return pendingRejoinDeviceSessionBuilder_;
    }

    private java.util.List<io.chirpstack.internal.UplinkAdrHistory> uplinkAdrHistory_ =
      java.util.Collections.emptyList();
    private void ensureUplinkAdrHistoryIsMutable() {
      if (!((bitField0_ & 0x40000000) != 0)) {
        uplinkAdrHistory_ = new java.util.ArrayList<io.chirpstack.internal.UplinkAdrHistory>(uplinkAdrHistory_);
        bitField0_ |= 0x40000000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.chirpstack.internal.UplinkAdrHistory, io.chirpstack.internal.UplinkAdrHistory.Builder, io.chirpstack.internal.UplinkAdrHistoryOrBuilder> uplinkAdrHistoryBuilder_;

    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public java.util.List<io.chirpstack.internal.UplinkAdrHistory> getUplinkAdrHistoryList() {
      if (uplinkAdrHistoryBuilder_ == null) {
        return java.util.Collections.unmodifiableList(uplinkAdrHistory_);
      } else {
        return uplinkAdrHistoryBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public int getUplinkAdrHistoryCount() {
      if (uplinkAdrHistoryBuilder_ == null) {
        return uplinkAdrHistory_.size();
      } else {
        return uplinkAdrHistoryBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public io.chirpstack.internal.UplinkAdrHistory getUplinkAdrHistory(int index) {
      if (uplinkAdrHistoryBuilder_ == null) {
        return uplinkAdrHistory_.get(index);
      } else {
        return uplinkAdrHistoryBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder setUplinkAdrHistory(
        int index, io.chirpstack.internal.UplinkAdrHistory value) {
      if (uplinkAdrHistoryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.set(index, value);
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder setUplinkAdrHistory(
        int index, io.chirpstack.internal.UplinkAdrHistory.Builder builderForValue) {
      if (uplinkAdrHistoryBuilder_ == null) {
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.set(index, builderForValue.build());
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder addUplinkAdrHistory(io.chirpstack.internal.UplinkAdrHistory value) {
      if (uplinkAdrHistoryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.add(value);
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder addUplinkAdrHistory(
        int index, io.chirpstack.internal.UplinkAdrHistory value) {
      if (uplinkAdrHistoryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.add(index, value);
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder addUplinkAdrHistory(
        io.chirpstack.internal.UplinkAdrHistory.Builder builderForValue) {
      if (uplinkAdrHistoryBuilder_ == null) {
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.add(builderForValue.build());
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder addUplinkAdrHistory(
        int index, io.chirpstack.internal.UplinkAdrHistory.Builder builderForValue) {
      if (uplinkAdrHistoryBuilder_ == null) {
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.add(index, builderForValue.build());
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder addAllUplinkAdrHistory(
        java.lang.Iterable<? extends io.chirpstack.internal.UplinkAdrHistory> values) {
      if (uplinkAdrHistoryBuilder_ == null) {
        ensureUplinkAdrHistoryIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, uplinkAdrHistory_);
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder clearUplinkAdrHistory() {
      if (uplinkAdrHistoryBuilder_ == null) {
        uplinkAdrHistory_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x40000000);
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public Builder removeUplinkAdrHistory(int index) {
      if (uplinkAdrHistoryBuilder_ == null) {
        ensureUplinkAdrHistoryIsMutable();
        uplinkAdrHistory_.remove(index);
        onChanged();
      } else {
        uplinkAdrHistoryBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public io.chirpstack.internal.UplinkAdrHistory.Builder getUplinkAdrHistoryBuilder(
        int index) {
      return getUplinkAdrHistoryFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public io.chirpstack.internal.UplinkAdrHistoryOrBuilder getUplinkAdrHistoryOrBuilder(
        int index) {
      if (uplinkAdrHistoryBuilder_ == null) {
        return uplinkAdrHistory_.get(index);  } else {
        return uplinkAdrHistoryBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public java.util.List<? extends io.chirpstack.internal.UplinkAdrHistoryOrBuilder> 
         getUplinkAdrHistoryOrBuilderList() {
      if (uplinkAdrHistoryBuilder_ != null) {
        return uplinkAdrHistoryBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(uplinkAdrHistory_);
      }
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public io.chirpstack.internal.UplinkAdrHistory.Builder addUplinkAdrHistoryBuilder() {
      return getUplinkAdrHistoryFieldBuilder().addBuilder(
          io.chirpstack.internal.UplinkAdrHistory.getDefaultInstance());
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public io.chirpstack.internal.UplinkAdrHistory.Builder addUplinkAdrHistoryBuilder(
        int index) {
      return getUplinkAdrHistoryFieldBuilder().addBuilder(
          index, io.chirpstack.internal.UplinkAdrHistory.getDefaultInstance());
    }
    /**
     * <pre>
     * Uplink history for ADR (last 20 uplink transmissions).
     * This table is reset in case one of parameters has changed:
     *   * DR
     *   * TxPower
     *   * NbTrans
     * </pre>
     *
     * <code>repeated .internal.UplinkAdrHistory uplink_adr_history = 30;</code>
     */
    public java.util.List<io.chirpstack.internal.UplinkAdrHistory.Builder> 
         getUplinkAdrHistoryBuilderList() {
      return getUplinkAdrHistoryFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.chirpstack.internal.UplinkAdrHistory, io.chirpstack.internal.UplinkAdrHistory.Builder, io.chirpstack.internal.UplinkAdrHistoryOrBuilder> 
        getUplinkAdrHistoryFieldBuilder() {
      if (uplinkAdrHistoryBuilder_ == null) {
        uplinkAdrHistoryBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.chirpstack.internal.UplinkAdrHistory, io.chirpstack.internal.UplinkAdrHistory.Builder, io.chirpstack.internal.UplinkAdrHistoryOrBuilder>(
                uplinkAdrHistory_,
                ((bitField0_ & 0x40000000) != 0),
                getParentForChildren(),
                isClean());
        uplinkAdrHistory_ = null;
      }
      return uplinkAdrHistoryBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Integer> macCommandErrorCount_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
        internalGetMacCommandErrorCount() {
      if (macCommandErrorCount_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MacCommandErrorCountDefaultEntryHolder.defaultEntry);
      }
      return macCommandErrorCount_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
        internalGetMutableMacCommandErrorCount() {
      if (macCommandErrorCount_ == null) {
        macCommandErrorCount_ = com.google.protobuf.MapField.newMapField(
            MacCommandErrorCountDefaultEntryHolder.defaultEntry);
      }
      if (!macCommandErrorCount_.isMutable()) {
        macCommandErrorCount_ = macCommandErrorCount_.copy();
      }
      bitField0_ |= 0x80000000;
      onChanged();
      return macCommandErrorCount_;
    }
    public int getMacCommandErrorCountCount() {
      return internalGetMacCommandErrorCount().getMap().size();
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    @java.lang.Override
    public boolean containsMacCommandErrorCount(
        int key) {

      return internalGetMacCommandErrorCount().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMacCommandErrorCountMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMacCommandErrorCount() {
      return getMacCommandErrorCountMap();
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMacCommandErrorCountMap() {
      return internalGetMacCommandErrorCount().getMap();
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    @java.lang.Override
    public int getMacCommandErrorCountOrDefault(
        int key,
        int defaultValue) {

      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMacCommandErrorCount().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    @java.lang.Override
    public int getMacCommandErrorCountOrThrow(
        int key) {

      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMacCommandErrorCount().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearMacCommandErrorCount() {
      bitField0_ = (bitField0_ & ~0x80000000);
      internalGetMutableMacCommandErrorCount().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    public Builder removeMacCommandErrorCount(
        int key) {

      internalGetMutableMacCommandErrorCount().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer>
        getMutableMacCommandErrorCount() {
      bitField0_ |= 0x80000000;
      return internalGetMutableMacCommandErrorCount().getMutableMap();
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    public Builder putMacCommandErrorCount(
        int key,
        int value) {


      internalGetMutableMacCommandErrorCount().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x80000000;
      return this;
    }
    /**
     * <pre>
     * Mac-command error count.
     * </pre>
     *
     * <code>map&lt;uint32, uint32&gt; mac_command_error_count = 31;</code>
     */
    public Builder putAllMacCommandErrorCount(
        java.util.Map<java.lang.Integer, java.lang.Integer> values) {
      internalGetMutableMacCommandErrorCount().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x80000000;
      return this;
    }

    private com.google.protobuf.Timestamp lastDeviceStatusRequest_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> lastDeviceStatusRequestBuilder_;
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     * @return Whether the lastDeviceStatusRequest field is set.
     */
    public boolean hasLastDeviceStatusRequest() {
      return ((bitField1_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     * @return The lastDeviceStatusRequest.
     */
    public com.google.protobuf.Timestamp getLastDeviceStatusRequest() {
      if (lastDeviceStatusRequestBuilder_ == null) {
        return lastDeviceStatusRequest_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : lastDeviceStatusRequest_;
      } else {
        return lastDeviceStatusRequestBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    public Builder setLastDeviceStatusRequest(com.google.protobuf.Timestamp value) {
      if (lastDeviceStatusRequestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        lastDeviceStatusRequest_ = value;
      } else {
        lastDeviceStatusRequestBuilder_.setMessage(value);
      }
      bitField1_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    public Builder setLastDeviceStatusRequest(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (lastDeviceStatusRequestBuilder_ == null) {
        lastDeviceStatusRequest_ = builderForValue.build();
      } else {
        lastDeviceStatusRequestBuilder_.setMessage(builderForValue.build());
      }
      bitField1_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    public Builder mergeLastDeviceStatusRequest(com.google.protobuf.Timestamp value) {
      if (lastDeviceStatusRequestBuilder_ == null) {
        if (((bitField1_ & 0x00000001) != 0) &&
          lastDeviceStatusRequest_ != null &&
          lastDeviceStatusRequest_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getLastDeviceStatusRequestBuilder().mergeFrom(value);
        } else {
          lastDeviceStatusRequest_ = value;
        }
      } else {
        lastDeviceStatusRequestBuilder_.mergeFrom(value);
      }
      if (lastDeviceStatusRequest_ != null) {
        bitField1_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    public Builder clearLastDeviceStatusRequest() {
      bitField1_ = (bitField1_ & ~0x00000001);
      lastDeviceStatusRequest_ = null;
      if (lastDeviceStatusRequestBuilder_ != null) {
        lastDeviceStatusRequestBuilder_.dispose();
        lastDeviceStatusRequestBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    public com.google.protobuf.Timestamp.Builder getLastDeviceStatusRequestBuilder() {
      bitField1_ |= 0x00000001;
      onChanged();
      return getLastDeviceStatusRequestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getLastDeviceStatusRequestOrBuilder() {
      if (lastDeviceStatusRequestBuilder_ != null) {
        return lastDeviceStatusRequestBuilder_.getMessageOrBuilder();
      } else {
        return lastDeviceStatusRequest_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : lastDeviceStatusRequest_;
      }
    }
    /**
     * <pre>
     * Last device-status request.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_device_status_request = 32;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getLastDeviceStatusRequestFieldBuilder() {
      if (lastDeviceStatusRequestBuilder_ == null) {
        lastDeviceStatusRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getLastDeviceStatusRequest(),
                getParentForChildren(),
                isClean());
        lastDeviceStatusRequest_ = null;
      }
      return lastDeviceStatusRequestBuilder_;
    }

    private boolean rejoinRequestEnabled_ ;
    /**
     * <pre>
     * RejoinRequestEnabled defines if the rejoin-request is enabled on the
     * device.
     * </pre>
     *
     * <code>bool rejoin_request_enabled = 33;</code>
     * @return The rejoinRequestEnabled.
     */
    @java.lang.Override
    public boolean getRejoinRequestEnabled() {
      return rejoinRequestEnabled_;
    }
    /**
     * <pre>
     * RejoinRequestEnabled defines if the rejoin-request is enabled on the
     * device.
     * </pre>
     *
     * <code>bool rejoin_request_enabled = 33;</code>
     * @param value The rejoinRequestEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setRejoinRequestEnabled(boolean value) {

      rejoinRequestEnabled_ = value;
      bitField1_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RejoinRequestEnabled defines if the rejoin-request is enabled on the
     * device.
     * </pre>
     *
     * <code>bool rejoin_request_enabled = 33;</code>
     * @return This builder for chaining.
     */
    public Builder clearRejoinRequestEnabled() {
      bitField1_ = (bitField1_ & ~0x00000002);
      rejoinRequestEnabled_ = false;
      onChanged();
      return this;
    }

    private int rejoinRequestMaxCountN_ ;
    /**
     * <pre>
     * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     * the rejoin-request.
     * </pre>
     *
     * <code>uint32 rejoin_request_max_count_n = 34;</code>
     * @return The rejoinRequestMaxCountN.
     */
    @java.lang.Override
    public int getRejoinRequestMaxCountN() {
      return rejoinRequestMaxCountN_;
    }
    /**
     * <pre>
     * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     * the rejoin-request.
     * </pre>
     *
     * <code>uint32 rejoin_request_max_count_n = 34;</code>
     * @param value The rejoinRequestMaxCountN to set.
     * @return This builder for chaining.
     */
    public Builder setRejoinRequestMaxCountN(int value) {

      rejoinRequestMaxCountN_ = value;
      bitField1_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     * the rejoin-request.
     * </pre>
     *
     * <code>uint32 rejoin_request_max_count_n = 34;</code>
     * @return This builder for chaining.
     */
    public Builder clearRejoinRequestMaxCountN() {
      bitField1_ = (bitField1_ & ~0x00000004);
      rejoinRequestMaxCountN_ = 0;
      onChanged();
      return this;
    }

    private int rejoinRequestMaxTimeN_ ;
    /**
     * <pre>
     * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     * for the rejoin-request.
     * </pre>
     *
     * <code>uint32 rejoin_request_max_time_n = 35;</code>
     * @return The rejoinRequestMaxTimeN.
     */
    @java.lang.Override
    public int getRejoinRequestMaxTimeN() {
      return rejoinRequestMaxTimeN_;
    }
    /**
     * <pre>
     * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     * for the rejoin-request.
     * </pre>
     *
     * <code>uint32 rejoin_request_max_time_n = 35;</code>
     * @param value The rejoinRequestMaxTimeN to set.
     * @return This builder for chaining.
     */
    public Builder setRejoinRequestMaxTimeN(int value) {

      rejoinRequestMaxTimeN_ = value;
      bitField1_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     * for the rejoin-request.
     * </pre>
     *
     * <code>uint32 rejoin_request_max_time_n = 35;</code>
     * @return This builder for chaining.
     */
    public Builder clearRejoinRequestMaxTimeN() {
      bitField1_ = (bitField1_ & ~0x00000008);
      rejoinRequestMaxTimeN_ = 0;
      onChanged();
      return this;
    }

    private int rejoinCount0_ ;
    /**
     * <pre>
     * Rejoin counter (RJCount0).
     * This counter is reset to 0 after each successful join-accept.
     * </pre>
     *
     * <code>uint32 rejoin_count_0 = 36;</code>
     * @return The rejoinCount0.
     */
    @java.lang.Override
    public int getRejoinCount0() {
      return rejoinCount0_;
    }
    /**
     * <pre>
     * Rejoin counter (RJCount0).
     * This counter is reset to 0 after each successful join-accept.
     * </pre>
     *
     * <code>uint32 rejoin_count_0 = 36;</code>
     * @param value The rejoinCount0 to set.
     * @return This builder for chaining.
     */
    public Builder setRejoinCount0(int value) {

      rejoinCount0_ = value;
      bitField1_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Rejoin counter (RJCount0).
     * This counter is reset to 0 after each successful join-accept.
     * </pre>
     *
     * <code>uint32 rejoin_count_0 = 36;</code>
     * @return This builder for chaining.
     */
    public Builder clearRejoinCount0() {
      bitField1_ = (bitField1_ & ~0x00000010);
      rejoinCount0_ = 0;
      onChanged();
      return this;
    }

    private boolean uplinkDwellTime400Ms_ ;
    /**
     * <pre>
     * Uplink dwell time.
     * </pre>
     *
     * <code>bool uplink_dwell_time_400ms = 37;</code>
     * @return The uplinkDwellTime400ms.
     */
    @java.lang.Override
    public boolean getUplinkDwellTime400Ms() {
      return uplinkDwellTime400Ms_;
    }
    /**
     * <pre>
     * Uplink dwell time.
     * </pre>
     *
     * <code>bool uplink_dwell_time_400ms = 37;</code>
     * @param value The uplinkDwellTime400ms to set.
     * @return This builder for chaining.
     */
    public Builder setUplinkDwellTime400Ms(boolean value) {

      uplinkDwellTime400Ms_ = value;
      bitField1_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Uplink dwell time.
     * </pre>
     *
     * <code>bool uplink_dwell_time_400ms = 37;</code>
     * @return This builder for chaining.
     */
    public Builder clearUplinkDwellTime400Ms() {
      bitField1_ = (bitField1_ & ~0x00000020);
      uplinkDwellTime400Ms_ = false;
      onChanged();
      return this;
    }

    private boolean downlinkDwellTime400Ms_ ;
    /**
     * <pre>
     * Downlink dwell time.
     * </pre>
     *
     * <code>bool downlink_dwell_time_400ms = 38;</code>
     * @return The downlinkDwellTime400ms.
     */
    @java.lang.Override
    public boolean getDownlinkDwellTime400Ms() {
      return downlinkDwellTime400Ms_;
    }
    /**
     * <pre>
     * Downlink dwell time.
     * </pre>
     *
     * <code>bool downlink_dwell_time_400ms = 38;</code>
     * @param value The downlinkDwellTime400ms to set.
     * @return This builder for chaining.
     */
    public Builder setDownlinkDwellTime400Ms(boolean value) {

      downlinkDwellTime400Ms_ = value;
      bitField1_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Downlink dwell time.
     * </pre>
     *
     * <code>bool downlink_dwell_time_400ms = 38;</code>
     * @return This builder for chaining.
     */
    public Builder clearDownlinkDwellTime400Ms() {
      bitField1_ = (bitField1_ & ~0x00000040);
      downlinkDwellTime400Ms_ = false;
      onChanged();
      return this;
    }

    private int uplinkMaxEirpIndex_ ;
    /**
     * <pre>
     * Uplink max. EIRP index.
     * </pre>
     *
     * <code>uint32 uplink_max_eirp_index = 39;</code>
     * @return The uplinkMaxEirpIndex.
     */
    @java.lang.Override
    public int getUplinkMaxEirpIndex() {
      return uplinkMaxEirpIndex_;
    }
    /**
     * <pre>
     * Uplink max. EIRP index.
     * </pre>
     *
     * <code>uint32 uplink_max_eirp_index = 39;</code>
     * @param value The uplinkMaxEirpIndex to set.
     * @return This builder for chaining.
     */
    public Builder setUplinkMaxEirpIndex(int value) {

      uplinkMaxEirpIndex_ = value;
      bitField1_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Uplink max. EIRP index.
     * </pre>
     *
     * <code>uint32 uplink_max_eirp_index = 39;</code>
     * @return This builder for chaining.
     */
    public Builder clearUplinkMaxEirpIndex() {
      bitField1_ = (bitField1_ & ~0x00000080);
      uplinkMaxEirpIndex_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object regionConfigId_ = "";
    /**
     * <pre>
     * Region configuration ID.
     * </pre>
     *
     * <code>string region_config_id = 40;</code>
     * @return The regionConfigId.
     */
    public java.lang.String getRegionConfigId() {
      java.lang.Object ref = regionConfigId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        regionConfigId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Region configuration ID.
     * </pre>
     *
     * <code>string region_config_id = 40;</code>
     * @return The bytes for regionConfigId.
     */
    public com.google.protobuf.ByteString
        getRegionConfigIdBytes() {
      java.lang.Object ref = regionConfigId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        regionConfigId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Region configuration ID.
     * </pre>
     *
     * <code>string region_config_id = 40;</code>
     * @param value The regionConfigId to set.
     * @return This builder for chaining.
     */
    public Builder setRegionConfigId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      regionConfigId_ = value;
      bitField1_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Region configuration ID.
     * </pre>
     *
     * <code>string region_config_id = 40;</code>
     * @return This builder for chaining.
     */
    public Builder clearRegionConfigId() {
      regionConfigId_ = getDefaultInstance().getRegionConfigId();
      bitField1_ = (bitField1_ & ~0x00000100);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Region configuration ID.
     * </pre>
     *
     * <code>string region_config_id = 40;</code>
     * @param value The bytes for regionConfigId to set.
     * @return This builder for chaining.
     */
    public Builder setRegionConfigIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      regionConfigId_ = value;
      bitField1_ |= 0x00000100;
      onChanged();
      return this;
    }

    private io.chirpstack.internal.Relay relay_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.chirpstack.internal.Relay, io.chirpstack.internal.Relay.Builder, io.chirpstack.internal.RelayOrBuilder> relayBuilder_;
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     * @return Whether the relay field is set.
     */
    public boolean hasRelay() {
      return ((bitField1_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     * @return The relay.
     */
    public io.chirpstack.internal.Relay getRelay() {
      if (relayBuilder_ == null) {
        return relay_ == null ? io.chirpstack.internal.Relay.getDefaultInstance() : relay_;
      } else {
        return relayBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    public Builder setRelay(io.chirpstack.internal.Relay value) {
      if (relayBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relay_ = value;
      } else {
        relayBuilder_.setMessage(value);
      }
      bitField1_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    public Builder setRelay(
        io.chirpstack.internal.Relay.Builder builderForValue) {
      if (relayBuilder_ == null) {
        relay_ = builderForValue.build();
      } else {
        relayBuilder_.setMessage(builderForValue.build());
      }
      bitField1_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    public Builder mergeRelay(io.chirpstack.internal.Relay value) {
      if (relayBuilder_ == null) {
        if (((bitField1_ & 0x00000200) != 0) &&
          relay_ != null &&
          relay_ != io.chirpstack.internal.Relay.getDefaultInstance()) {
          getRelayBuilder().mergeFrom(value);
        } else {
          relay_ = value;
        }
      } else {
        relayBuilder_.mergeFrom(value);
      }
      if (relay_ != null) {
        bitField1_ |= 0x00000200;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    public Builder clearRelay() {
      bitField1_ = (bitField1_ & ~0x00000200);
      relay_ = null;
      if (relayBuilder_ != null) {
        relayBuilder_.dispose();
        relayBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    public io.chirpstack.internal.Relay.Builder getRelayBuilder() {
      bitField1_ |= 0x00000200;
      onChanged();
      return getRelayFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    public io.chirpstack.internal.RelayOrBuilder getRelayOrBuilder() {
      if (relayBuilder_ != null) {
        return relayBuilder_.getMessageOrBuilder();
      } else {
        return relay_ == null ?
            io.chirpstack.internal.Relay.getDefaultInstance() : relay_;
      }
    }
    /**
     * <pre>
     * Relay state.
     * </pre>
     *
     * <code>.internal.Relay relay = 41;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.chirpstack.internal.Relay, io.chirpstack.internal.Relay.Builder, io.chirpstack.internal.RelayOrBuilder> 
        getRelayFieldBuilder() {
      if (relayBuilder_ == null) {
        relayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.chirpstack.internal.Relay, io.chirpstack.internal.Relay.Builder, io.chirpstack.internal.RelayOrBuilder>(
                getRelay(),
                getParentForChildren(),
                isClean());
        relay_ = null;
      }
      return relayBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:internal.DeviceSession)
  }

  // @@protoc_insertion_point(class_scope:internal.DeviceSession)
  private static final io.chirpstack.internal.DeviceSession DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.chirpstack.internal.DeviceSession();
  }

  public static io.chirpstack.internal.DeviceSession getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DeviceSession>
      PARSER = new com.google.protobuf.AbstractParser<DeviceSession>() {
    @java.lang.Override
    public DeviceSession parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DeviceSession> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DeviceSession> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.chirpstack.internal.DeviceSession getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

