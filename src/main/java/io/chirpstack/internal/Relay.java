// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/internal.proto

// Protobuf Java Version: 3.25.1
package io.chirpstack.internal;

/**
 * Protobuf type {@code internal.Relay}
 */
public final class Relay extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:internal.Relay)
    RelayOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Relay.newBuilder() to construct.
  private Relay(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Relay() {
    devices_ = java.util.Collections.emptyList();
    filters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Relay();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.chirpstack.internal.InternalProto.internal_static_internal_Relay_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.chirpstack.internal.InternalProto.internal_static_internal_Relay_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.chirpstack.internal.Relay.class, io.chirpstack.internal.Relay.Builder.class);
  }

  public static final int DEVICES_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<io.chirpstack.internal.RelayDevice> devices_;
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  @java.lang.Override
  public java.util.List<io.chirpstack.internal.RelayDevice> getDevicesList() {
    return devices_;
  }
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.chirpstack.internal.RelayDeviceOrBuilder> 
      getDevicesOrBuilderList() {
    return devices_;
  }
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  @java.lang.Override
  public int getDevicesCount() {
    return devices_.size();
  }
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.RelayDevice getDevices(int index) {
    return devices_.get(index);
  }
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.RelayDeviceOrBuilder getDevicesOrBuilder(
      int index) {
    return devices_.get(index);
  }

  public static final int FILTERS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<io.chirpstack.internal.RelayFilter> filters_;
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.chirpstack.internal.RelayFilter> getFiltersList() {
    return filters_;
  }
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.chirpstack.internal.RelayFilterOrBuilder> 
      getFiltersOrBuilderList() {
    return filters_;
  }
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  @java.lang.Override
  public int getFiltersCount() {
    return filters_.size();
  }
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.RelayFilter getFilters(int index) {
    return filters_.get(index);
  }
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  @java.lang.Override
  public io.chirpstack.internal.RelayFilterOrBuilder getFiltersOrBuilder(
      int index) {
    return filters_.get(index);
  }

  public static final int ENABLED_FIELD_NUMBER = 3;
  private boolean enabled_ = false;
  /**
   * <pre>
   * Relay is enabled.
   * </pre>
   *
   * <code>bool enabled = 3;</code>
   * @return The enabled.
   */
  @java.lang.Override
  public boolean getEnabled() {
    return enabled_;
  }

  public static final int CAD_PERIODICITY_FIELD_NUMBER = 4;
  private int cadPeriodicity_ = 0;
  /**
   * <pre>
   * CAD periodicity.
   * </pre>
   *
   * <code>uint32 cad_periodicity = 4;</code>
   * @return The cadPeriodicity.
   */
  @java.lang.Override
  public int getCadPeriodicity() {
    return cadPeriodicity_;
  }

  public static final int DEFAULT_CHANNEL_INDEX_FIELD_NUMBER = 5;
  private int defaultChannelIndex_ = 0;
  /**
   * <pre>
   * Default channel index.
   * </pre>
   *
   * <code>uint32 default_channel_index = 5;</code>
   * @return The defaultChannelIndex.
   */
  @java.lang.Override
  public int getDefaultChannelIndex() {
    return defaultChannelIndex_;
  }

  public static final int SECOND_CHANNEL_FREQ_FIELD_NUMBER = 6;
  private int secondChannelFreq_ = 0;
  /**
   * <pre>
   * Second channel freq.
   * </pre>
   *
   * <code>uint32 second_channel_freq = 6;</code>
   * @return The secondChannelFreq.
   */
  @java.lang.Override
  public int getSecondChannelFreq() {
    return secondChannelFreq_;
  }

  public static final int SECOND_CHANNEL_DR_FIELD_NUMBER = 7;
  private int secondChannelDr_ = 0;
  /**
   * <pre>
   * Second channel DR.
   * </pre>
   *
   * <code>uint32 second_channel_dr = 7;</code>
   * @return The secondChannelDr.
   */
  @java.lang.Override
  public int getSecondChannelDr() {
    return secondChannelDr_;
  }

  public static final int SECOND_CHANNEL_ACK_OFFSET_FIELD_NUMBER = 8;
  private int secondChannelAckOffset_ = 0;
  /**
   * <pre>
   * Second channel ACK offset.
   * </pre>
   *
   * <code>uint32 second_channel_ack_offset = 8;</code>
   * @return The secondChannelAckOffset.
   */
  @java.lang.Override
  public int getSecondChannelAckOffset() {
    return secondChannelAckOffset_;
  }

  public static final int ED_ACTIVATION_MODE_FIELD_NUMBER = 9;
  private int edActivationMode_ = 0;
  /**
   * <pre>
   * End-device activation mode.
   * </pre>
   *
   * <code>uint32 ed_activation_mode = 9;</code>
   * @return The edActivationMode.
   */
  @java.lang.Override
  public int getEdActivationMode() {
    return edActivationMode_;
  }

  public static final int ED_SMART_ENABLE_LEVEL_FIELD_NUMBER = 10;
  private int edSmartEnableLevel_ = 0;
  /**
   * <pre>
   * End-device smart-enable level.
   * </pre>
   *
   * <code>uint32 ed_smart_enable_level = 10;</code>
   * @return The edSmartEnableLevel.
   */
  @java.lang.Override
  public int getEdSmartEnableLevel() {
    return edSmartEnableLevel_;
  }

  public static final int ED_BACK_OFF_FIELD_NUMBER = 11;
  private int edBackOff_ = 0;
  /**
   * <pre>
   * End-device back-off.
   * </pre>
   *
   * <code>uint32 ed_back_off = 11;</code>
   * @return The edBackOff.
   */
  @java.lang.Override
  public int getEdBackOff() {
    return edBackOff_;
  }

  public static final int JOIN_REQ_LIMIT_RELOAD_RATE_FIELD_NUMBER = 12;
  private int joinReqLimitReloadRate_ = 0;
  /**
   * <pre>
   * Join-request limit reload rate.
   * </pre>
   *
   * <code>uint32 join_req_limit_reload_rate = 12;</code>
   * @return The joinReqLimitReloadRate.
   */
  @java.lang.Override
  public int getJoinReqLimitReloadRate() {
    return joinReqLimitReloadRate_;
  }

  public static final int NOTIFY_LIMIT_RELOAD_RATE_FIELD_NUMBER = 13;
  private int notifyLimitReloadRate_ = 0;
  /**
   * <pre>
   * Notify limit reload rate.
   * </pre>
   *
   * <code>uint32 notify_limit_reload_rate = 13;</code>
   * @return The notifyLimitReloadRate.
   */
  @java.lang.Override
  public int getNotifyLimitReloadRate() {
    return notifyLimitReloadRate_;
  }

  public static final int GLOBAL_UPLINK_LIMIT_RELOAD_RATE_FIELD_NUMBER = 14;
  private int globalUplinkLimitReloadRate_ = 0;
  /**
   * <pre>
   * Global uplink limit reload rate.
   * </pre>
   *
   * <code>uint32 global_uplink_limit_reload_rate = 14;</code>
   * @return The globalUplinkLimitReloadRate.
   */
  @java.lang.Override
  public int getGlobalUplinkLimitReloadRate() {
    return globalUplinkLimitReloadRate_;
  }

  public static final int OVERALL_LIMIT_RELOAD_RATE_FIELD_NUMBER = 15;
  private int overallLimitReloadRate_ = 0;
  /**
   * <pre>
   * Overall limit reload rate.
   * </pre>
   *
   * <code>uint32 overall_limit_reload_rate = 15;</code>
   * @return The overallLimitReloadRate.
   */
  @java.lang.Override
  public int getOverallLimitReloadRate() {
    return overallLimitReloadRate_;
  }

  public static final int JOIN_REQ_LIMIT_BUCKET_SIZE_FIELD_NUMBER = 16;
  private int joinReqLimitBucketSize_ = 0;
  /**
   * <pre>
   * Join-request limit bucket size.
   * </pre>
   *
   * <code>uint32 join_req_limit_bucket_size = 16;</code>
   * @return The joinReqLimitBucketSize.
   */
  @java.lang.Override
  public int getJoinReqLimitBucketSize() {
    return joinReqLimitBucketSize_;
  }

  public static final int NOTIFY_LIMIT_BUCKET_SIZE_FIELD_NUMBER = 17;
  private int notifyLimitBucketSize_ = 0;
  /**
   * <pre>
   * Notify limit bucket size.
   * </pre>
   *
   * <code>uint32 notify_limit_bucket_size = 17;</code>
   * @return The notifyLimitBucketSize.
   */
  @java.lang.Override
  public int getNotifyLimitBucketSize() {
    return notifyLimitBucketSize_;
  }

  public static final int GLOBAL_UPLINK_LIMIT_BUCKET_SIZE_FIELD_NUMBER = 18;
  private int globalUplinkLimitBucketSize_ = 0;
  /**
   * <pre>
   * Global uplink limit bucket size.
   * </pre>
   *
   * <code>uint32 global_uplink_limit_bucket_size = 18;</code>
   * @return The globalUplinkLimitBucketSize.
   */
  @java.lang.Override
  public int getGlobalUplinkLimitBucketSize() {
    return globalUplinkLimitBucketSize_;
  }

  public static final int OVERALL_LIMIT_BUCKET_SIZE_FIELD_NUMBER = 19;
  private int overallLimitBucketSize_ = 0;
  /**
   * <pre>
   * Overall limit bucket size.
   * </pre>
   *
   * <code>uint32 overall_limit_bucket_size = 19;</code>
   * @return The overallLimitBucketSize.
   */
  @java.lang.Override
  public int getOverallLimitBucketSize() {
    return overallLimitBucketSize_;
  }

  public static final int ED_RELAY_ONLY_FIELD_NUMBER = 20;
  private boolean edRelayOnly_ = false;
  /**
   * <pre>
   * End-device must communicate through relay only.
   * This is stored in the device-session as we need to validate on retrieving
   * the device-session.
   * </pre>
   *
   * <code>bool ed_relay_only = 20;</code>
   * @return The edRelayOnly.
   */
  @java.lang.Override
  public boolean getEdRelayOnly() {
    return edRelayOnly_;
  }

  public static final int W_F_CNT_FIELD_NUMBER = 21;
  private int wFCnt_ = 0;
  /**
   * <pre>
   * End-device WFCnt.
   * This holds the last known WFCnt value. ChirpStack will periodically read
   * this value from the Relay.
   * </pre>
   *
   * <code>uint32 w_f_cnt = 21;</code>
   * @return The wFCnt.
   */
  @java.lang.Override
  public int getWFCnt() {
    return wFCnt_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < devices_.size(); i++) {
      output.writeMessage(1, devices_.get(i));
    }
    for (int i = 0; i < filters_.size(); i++) {
      output.writeMessage(2, filters_.get(i));
    }
    if (enabled_ != false) {
      output.writeBool(3, enabled_);
    }
    if (cadPeriodicity_ != 0) {
      output.writeUInt32(4, cadPeriodicity_);
    }
    if (defaultChannelIndex_ != 0) {
      output.writeUInt32(5, defaultChannelIndex_);
    }
    if (secondChannelFreq_ != 0) {
      output.writeUInt32(6, secondChannelFreq_);
    }
    if (secondChannelDr_ != 0) {
      output.writeUInt32(7, secondChannelDr_);
    }
    if (secondChannelAckOffset_ != 0) {
      output.writeUInt32(8, secondChannelAckOffset_);
    }
    if (edActivationMode_ != 0) {
      output.writeUInt32(9, edActivationMode_);
    }
    if (edSmartEnableLevel_ != 0) {
      output.writeUInt32(10, edSmartEnableLevel_);
    }
    if (edBackOff_ != 0) {
      output.writeUInt32(11, edBackOff_);
    }
    if (joinReqLimitReloadRate_ != 0) {
      output.writeUInt32(12, joinReqLimitReloadRate_);
    }
    if (notifyLimitReloadRate_ != 0) {
      output.writeUInt32(13, notifyLimitReloadRate_);
    }
    if (globalUplinkLimitReloadRate_ != 0) {
      output.writeUInt32(14, globalUplinkLimitReloadRate_);
    }
    if (overallLimitReloadRate_ != 0) {
      output.writeUInt32(15, overallLimitReloadRate_);
    }
    if (joinReqLimitBucketSize_ != 0) {
      output.writeUInt32(16, joinReqLimitBucketSize_);
    }
    if (notifyLimitBucketSize_ != 0) {
      output.writeUInt32(17, notifyLimitBucketSize_);
    }
    if (globalUplinkLimitBucketSize_ != 0) {
      output.writeUInt32(18, globalUplinkLimitBucketSize_);
    }
    if (overallLimitBucketSize_ != 0) {
      output.writeUInt32(19, overallLimitBucketSize_);
    }
    if (edRelayOnly_ != false) {
      output.writeBool(20, edRelayOnly_);
    }
    if (wFCnt_ != 0) {
      output.writeUInt32(21, wFCnt_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < devices_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, devices_.get(i));
    }
    for (int i = 0; i < filters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, filters_.get(i));
    }
    if (enabled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, enabled_);
    }
    if (cadPeriodicity_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, cadPeriodicity_);
    }
    if (defaultChannelIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, defaultChannelIndex_);
    }
    if (secondChannelFreq_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(6, secondChannelFreq_);
    }
    if (secondChannelDr_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(7, secondChannelDr_);
    }
    if (secondChannelAckOffset_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(8, secondChannelAckOffset_);
    }
    if (edActivationMode_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(9, edActivationMode_);
    }
    if (edSmartEnableLevel_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, edSmartEnableLevel_);
    }
    if (edBackOff_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, edBackOff_);
    }
    if (joinReqLimitReloadRate_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(12, joinReqLimitReloadRate_);
    }
    if (notifyLimitReloadRate_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(13, notifyLimitReloadRate_);
    }
    if (globalUplinkLimitReloadRate_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(14, globalUplinkLimitReloadRate_);
    }
    if (overallLimitReloadRate_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(15, overallLimitReloadRate_);
    }
    if (joinReqLimitBucketSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(16, joinReqLimitBucketSize_);
    }
    if (notifyLimitBucketSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(17, notifyLimitBucketSize_);
    }
    if (globalUplinkLimitBucketSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(18, globalUplinkLimitBucketSize_);
    }
    if (overallLimitBucketSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(19, overallLimitBucketSize_);
    }
    if (edRelayOnly_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(20, edRelayOnly_);
    }
    if (wFCnt_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(21, wFCnt_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.chirpstack.internal.Relay)) {
      return super.equals(obj);
    }
    io.chirpstack.internal.Relay other = (io.chirpstack.internal.Relay) obj;

    if (!getDevicesList()
        .equals(other.getDevicesList())) return false;
    if (!getFiltersList()
        .equals(other.getFiltersList())) return false;
    if (getEnabled()
        != other.getEnabled()) return false;
    if (getCadPeriodicity()
        != other.getCadPeriodicity()) return false;
    if (getDefaultChannelIndex()
        != other.getDefaultChannelIndex()) return false;
    if (getSecondChannelFreq()
        != other.getSecondChannelFreq()) return false;
    if (getSecondChannelDr()
        != other.getSecondChannelDr()) return false;
    if (getSecondChannelAckOffset()
        != other.getSecondChannelAckOffset()) return false;
    if (getEdActivationMode()
        != other.getEdActivationMode()) return false;
    if (getEdSmartEnableLevel()
        != other.getEdSmartEnableLevel()) return false;
    if (getEdBackOff()
        != other.getEdBackOff()) return false;
    if (getJoinReqLimitReloadRate()
        != other.getJoinReqLimitReloadRate()) return false;
    if (getNotifyLimitReloadRate()
        != other.getNotifyLimitReloadRate()) return false;
    if (getGlobalUplinkLimitReloadRate()
        != other.getGlobalUplinkLimitReloadRate()) return false;
    if (getOverallLimitReloadRate()
        != other.getOverallLimitReloadRate()) return false;
    if (getJoinReqLimitBucketSize()
        != other.getJoinReqLimitBucketSize()) return false;
    if (getNotifyLimitBucketSize()
        != other.getNotifyLimitBucketSize()) return false;
    if (getGlobalUplinkLimitBucketSize()
        != other.getGlobalUplinkLimitBucketSize()) return false;
    if (getOverallLimitBucketSize()
        != other.getOverallLimitBucketSize()) return false;
    if (getEdRelayOnly()
        != other.getEdRelayOnly()) return false;
    if (getWFCnt()
        != other.getWFCnt()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getDevicesCount() > 0) {
      hash = (37 * hash) + DEVICES_FIELD_NUMBER;
      hash = (53 * hash) + getDevicesList().hashCode();
    }
    if (getFiltersCount() > 0) {
      hash = (37 * hash) + FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getFiltersList().hashCode();
    }
    hash = (37 * hash) + ENABLED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEnabled());
    hash = (37 * hash) + CAD_PERIODICITY_FIELD_NUMBER;
    hash = (53 * hash) + getCadPeriodicity();
    hash = (37 * hash) + DEFAULT_CHANNEL_INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getDefaultChannelIndex();
    hash = (37 * hash) + SECOND_CHANNEL_FREQ_FIELD_NUMBER;
    hash = (53 * hash) + getSecondChannelFreq();
    hash = (37 * hash) + SECOND_CHANNEL_DR_FIELD_NUMBER;
    hash = (53 * hash) + getSecondChannelDr();
    hash = (37 * hash) + SECOND_CHANNEL_ACK_OFFSET_FIELD_NUMBER;
    hash = (53 * hash) + getSecondChannelAckOffset();
    hash = (37 * hash) + ED_ACTIVATION_MODE_FIELD_NUMBER;
    hash = (53 * hash) + getEdActivationMode();
    hash = (37 * hash) + ED_SMART_ENABLE_LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + getEdSmartEnableLevel();
    hash = (37 * hash) + ED_BACK_OFF_FIELD_NUMBER;
    hash = (53 * hash) + getEdBackOff();
    hash = (37 * hash) + JOIN_REQ_LIMIT_RELOAD_RATE_FIELD_NUMBER;
    hash = (53 * hash) + getJoinReqLimitReloadRate();
    hash = (37 * hash) + NOTIFY_LIMIT_RELOAD_RATE_FIELD_NUMBER;
    hash = (53 * hash) + getNotifyLimitReloadRate();
    hash = (37 * hash) + GLOBAL_UPLINK_LIMIT_RELOAD_RATE_FIELD_NUMBER;
    hash = (53 * hash) + getGlobalUplinkLimitReloadRate();
    hash = (37 * hash) + OVERALL_LIMIT_RELOAD_RATE_FIELD_NUMBER;
    hash = (53 * hash) + getOverallLimitReloadRate();
    hash = (37 * hash) + JOIN_REQ_LIMIT_BUCKET_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getJoinReqLimitBucketSize();
    hash = (37 * hash) + NOTIFY_LIMIT_BUCKET_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getNotifyLimitBucketSize();
    hash = (37 * hash) + GLOBAL_UPLINK_LIMIT_BUCKET_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getGlobalUplinkLimitBucketSize();
    hash = (37 * hash) + OVERALL_LIMIT_BUCKET_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getOverallLimitBucketSize();
    hash = (37 * hash) + ED_RELAY_ONLY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEdRelayOnly());
    hash = (37 * hash) + W_F_CNT_FIELD_NUMBER;
    hash = (53 * hash) + getWFCnt();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.chirpstack.internal.Relay parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.chirpstack.internal.Relay parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.chirpstack.internal.Relay parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.chirpstack.internal.Relay parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.chirpstack.internal.Relay parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.chirpstack.internal.Relay parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.chirpstack.internal.Relay prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code internal.Relay}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:internal.Relay)
      io.chirpstack.internal.RelayOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.chirpstack.internal.InternalProto.internal_static_internal_Relay_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.chirpstack.internal.InternalProto.internal_static_internal_Relay_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.chirpstack.internal.Relay.class, io.chirpstack.internal.Relay.Builder.class);
    }

    // Construct using io.chirpstack.internal.Relay.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (devicesBuilder_ == null) {
        devices_ = java.util.Collections.emptyList();
      } else {
        devices_ = null;
        devicesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (filtersBuilder_ == null) {
        filters_ = java.util.Collections.emptyList();
      } else {
        filters_ = null;
        filtersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      enabled_ = false;
      cadPeriodicity_ = 0;
      defaultChannelIndex_ = 0;
      secondChannelFreq_ = 0;
      secondChannelDr_ = 0;
      secondChannelAckOffset_ = 0;
      edActivationMode_ = 0;
      edSmartEnableLevel_ = 0;
      edBackOff_ = 0;
      joinReqLimitReloadRate_ = 0;
      notifyLimitReloadRate_ = 0;
      globalUplinkLimitReloadRate_ = 0;
      overallLimitReloadRate_ = 0;
      joinReqLimitBucketSize_ = 0;
      notifyLimitBucketSize_ = 0;
      globalUplinkLimitBucketSize_ = 0;
      overallLimitBucketSize_ = 0;
      edRelayOnly_ = false;
      wFCnt_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.chirpstack.internal.InternalProto.internal_static_internal_Relay_descriptor;
    }

    @java.lang.Override
    public io.chirpstack.internal.Relay getDefaultInstanceForType() {
      return io.chirpstack.internal.Relay.getDefaultInstance();
    }

    @java.lang.Override
    public io.chirpstack.internal.Relay build() {
      io.chirpstack.internal.Relay result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.chirpstack.internal.Relay buildPartial() {
      io.chirpstack.internal.Relay result = new io.chirpstack.internal.Relay(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.chirpstack.internal.Relay result) {
      if (devicesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          devices_ = java.util.Collections.unmodifiableList(devices_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.devices_ = devices_;
      } else {
        result.devices_ = devicesBuilder_.build();
      }
      if (filtersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          filters_ = java.util.Collections.unmodifiableList(filters_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.filters_ = filters_;
      } else {
        result.filters_ = filtersBuilder_.build();
      }
    }

    private void buildPartial0(io.chirpstack.internal.Relay result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.enabled_ = enabled_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.cadPeriodicity_ = cadPeriodicity_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.defaultChannelIndex_ = defaultChannelIndex_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.secondChannelFreq_ = secondChannelFreq_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.secondChannelDr_ = secondChannelDr_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.secondChannelAckOffset_ = secondChannelAckOffset_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.edActivationMode_ = edActivationMode_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.edSmartEnableLevel_ = edSmartEnableLevel_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.edBackOff_ = edBackOff_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.joinReqLimitReloadRate_ = joinReqLimitReloadRate_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.notifyLimitReloadRate_ = notifyLimitReloadRate_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.globalUplinkLimitReloadRate_ = globalUplinkLimitReloadRate_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.overallLimitReloadRate_ = overallLimitReloadRate_;
      }
      if (((from_bitField0_ & 0x00008000) != 0)) {
        result.joinReqLimitBucketSize_ = joinReqLimitBucketSize_;
      }
      if (((from_bitField0_ & 0x00010000) != 0)) {
        result.notifyLimitBucketSize_ = notifyLimitBucketSize_;
      }
      if (((from_bitField0_ & 0x00020000) != 0)) {
        result.globalUplinkLimitBucketSize_ = globalUplinkLimitBucketSize_;
      }
      if (((from_bitField0_ & 0x00040000) != 0)) {
        result.overallLimitBucketSize_ = overallLimitBucketSize_;
      }
      if (((from_bitField0_ & 0x00080000) != 0)) {
        result.edRelayOnly_ = edRelayOnly_;
      }
      if (((from_bitField0_ & 0x00100000) != 0)) {
        result.wFCnt_ = wFCnt_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.chirpstack.internal.Relay) {
        return mergeFrom((io.chirpstack.internal.Relay)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.chirpstack.internal.Relay other) {
      if (other == io.chirpstack.internal.Relay.getDefaultInstance()) return this;
      if (devicesBuilder_ == null) {
        if (!other.devices_.isEmpty()) {
          if (devices_.isEmpty()) {
            devices_ = other.devices_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDevicesIsMutable();
            devices_.addAll(other.devices_);
          }
          onChanged();
        }
      } else {
        if (!other.devices_.isEmpty()) {
          if (devicesBuilder_.isEmpty()) {
            devicesBuilder_.dispose();
            devicesBuilder_ = null;
            devices_ = other.devices_;
            bitField0_ = (bitField0_ & ~0x00000001);
            devicesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDevicesFieldBuilder() : null;
          } else {
            devicesBuilder_.addAllMessages(other.devices_);
          }
        }
      }
      if (filtersBuilder_ == null) {
        if (!other.filters_.isEmpty()) {
          if (filters_.isEmpty()) {
            filters_ = other.filters_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureFiltersIsMutable();
            filters_.addAll(other.filters_);
          }
          onChanged();
        }
      } else {
        if (!other.filters_.isEmpty()) {
          if (filtersBuilder_.isEmpty()) {
            filtersBuilder_.dispose();
            filtersBuilder_ = null;
            filters_ = other.filters_;
            bitField0_ = (bitField0_ & ~0x00000002);
            filtersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFiltersFieldBuilder() : null;
          } else {
            filtersBuilder_.addAllMessages(other.filters_);
          }
        }
      }
      if (other.getEnabled() != false) {
        setEnabled(other.getEnabled());
      }
      if (other.getCadPeriodicity() != 0) {
        setCadPeriodicity(other.getCadPeriodicity());
      }
      if (other.getDefaultChannelIndex() != 0) {
        setDefaultChannelIndex(other.getDefaultChannelIndex());
      }
      if (other.getSecondChannelFreq() != 0) {
        setSecondChannelFreq(other.getSecondChannelFreq());
      }
      if (other.getSecondChannelDr() != 0) {
        setSecondChannelDr(other.getSecondChannelDr());
      }
      if (other.getSecondChannelAckOffset() != 0) {
        setSecondChannelAckOffset(other.getSecondChannelAckOffset());
      }
      if (other.getEdActivationMode() != 0) {
        setEdActivationMode(other.getEdActivationMode());
      }
      if (other.getEdSmartEnableLevel() != 0) {
        setEdSmartEnableLevel(other.getEdSmartEnableLevel());
      }
      if (other.getEdBackOff() != 0) {
        setEdBackOff(other.getEdBackOff());
      }
      if (other.getJoinReqLimitReloadRate() != 0) {
        setJoinReqLimitReloadRate(other.getJoinReqLimitReloadRate());
      }
      if (other.getNotifyLimitReloadRate() != 0) {
        setNotifyLimitReloadRate(other.getNotifyLimitReloadRate());
      }
      if (other.getGlobalUplinkLimitReloadRate() != 0) {
        setGlobalUplinkLimitReloadRate(other.getGlobalUplinkLimitReloadRate());
      }
      if (other.getOverallLimitReloadRate() != 0) {
        setOverallLimitReloadRate(other.getOverallLimitReloadRate());
      }
      if (other.getJoinReqLimitBucketSize() != 0) {
        setJoinReqLimitBucketSize(other.getJoinReqLimitBucketSize());
      }
      if (other.getNotifyLimitBucketSize() != 0) {
        setNotifyLimitBucketSize(other.getNotifyLimitBucketSize());
      }
      if (other.getGlobalUplinkLimitBucketSize() != 0) {
        setGlobalUplinkLimitBucketSize(other.getGlobalUplinkLimitBucketSize());
      }
      if (other.getOverallLimitBucketSize() != 0) {
        setOverallLimitBucketSize(other.getOverallLimitBucketSize());
      }
      if (other.getEdRelayOnly() != false) {
        setEdRelayOnly(other.getEdRelayOnly());
      }
      if (other.getWFCnt() != 0) {
        setWFCnt(other.getWFCnt());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.chirpstack.internal.RelayDevice m =
                  input.readMessage(
                      io.chirpstack.internal.RelayDevice.parser(),
                      extensionRegistry);
              if (devicesBuilder_ == null) {
                ensureDevicesIsMutable();
                devices_.add(m);
              } else {
                devicesBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              io.chirpstack.internal.RelayFilter m =
                  input.readMessage(
                      io.chirpstack.internal.RelayFilter.parser(),
                      extensionRegistry);
              if (filtersBuilder_ == null) {
                ensureFiltersIsMutable();
                filters_.add(m);
              } else {
                filtersBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 24: {
              enabled_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              cadPeriodicity_ = input.readUInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              defaultChannelIndex_ = input.readUInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              secondChannelFreq_ = input.readUInt32();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 56: {
              secondChannelDr_ = input.readUInt32();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              secondChannelAckOffset_ = input.readUInt32();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 72: {
              edActivationMode_ = input.readUInt32();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 80: {
              edSmartEnableLevel_ = input.readUInt32();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            case 88: {
              edBackOff_ = input.readUInt32();
              bitField0_ |= 0x00000400;
              break;
            } // case 88
            case 96: {
              joinReqLimitReloadRate_ = input.readUInt32();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            case 104: {
              notifyLimitReloadRate_ = input.readUInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 104
            case 112: {
              globalUplinkLimitReloadRate_ = input.readUInt32();
              bitField0_ |= 0x00002000;
              break;
            } // case 112
            case 120: {
              overallLimitReloadRate_ = input.readUInt32();
              bitField0_ |= 0x00004000;
              break;
            } // case 120
            case 128: {
              joinReqLimitBucketSize_ = input.readUInt32();
              bitField0_ |= 0x00008000;
              break;
            } // case 128
            case 136: {
              notifyLimitBucketSize_ = input.readUInt32();
              bitField0_ |= 0x00010000;
              break;
            } // case 136
            case 144: {
              globalUplinkLimitBucketSize_ = input.readUInt32();
              bitField0_ |= 0x00020000;
              break;
            } // case 144
            case 152: {
              overallLimitBucketSize_ = input.readUInt32();
              bitField0_ |= 0x00040000;
              break;
            } // case 152
            case 160: {
              edRelayOnly_ = input.readBool();
              bitField0_ |= 0x00080000;
              break;
            } // case 160
            case 168: {
              wFCnt_ = input.readUInt32();
              bitField0_ |= 0x00100000;
              break;
            } // case 168
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<io.chirpstack.internal.RelayDevice> devices_ =
      java.util.Collections.emptyList();
    private void ensureDevicesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        devices_ = new java.util.ArrayList<io.chirpstack.internal.RelayDevice>(devices_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.chirpstack.internal.RelayDevice, io.chirpstack.internal.RelayDevice.Builder, io.chirpstack.internal.RelayDeviceOrBuilder> devicesBuilder_;

    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public java.util.List<io.chirpstack.internal.RelayDevice> getDevicesList() {
      if (devicesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(devices_);
      } else {
        return devicesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public int getDevicesCount() {
      if (devicesBuilder_ == null) {
        return devices_.size();
      } else {
        return devicesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public io.chirpstack.internal.RelayDevice getDevices(int index) {
      if (devicesBuilder_ == null) {
        return devices_.get(index);
      } else {
        return devicesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder setDevices(
        int index, io.chirpstack.internal.RelayDevice value) {
      if (devicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDevicesIsMutable();
        devices_.set(index, value);
        onChanged();
      } else {
        devicesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder setDevices(
        int index, io.chirpstack.internal.RelayDevice.Builder builderForValue) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.set(index, builderForValue.build());
        onChanged();
      } else {
        devicesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder addDevices(io.chirpstack.internal.RelayDevice value) {
      if (devicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDevicesIsMutable();
        devices_.add(value);
        onChanged();
      } else {
        devicesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder addDevices(
        int index, io.chirpstack.internal.RelayDevice value) {
      if (devicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDevicesIsMutable();
        devices_.add(index, value);
        onChanged();
      } else {
        devicesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder addDevices(
        io.chirpstack.internal.RelayDevice.Builder builderForValue) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.add(builderForValue.build());
        onChanged();
      } else {
        devicesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder addDevices(
        int index, io.chirpstack.internal.RelayDevice.Builder builderForValue) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.add(index, builderForValue.build());
        onChanged();
      } else {
        devicesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder addAllDevices(
        java.lang.Iterable<? extends io.chirpstack.internal.RelayDevice> values) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, devices_);
        onChanged();
      } else {
        devicesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder clearDevices() {
      if (devicesBuilder_ == null) {
        devices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        devicesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public Builder removeDevices(int index) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.remove(index);
        onChanged();
      } else {
        devicesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public io.chirpstack.internal.RelayDevice.Builder getDevicesBuilder(
        int index) {
      return getDevicesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public io.chirpstack.internal.RelayDeviceOrBuilder getDevicesOrBuilder(
        int index) {
      if (devicesBuilder_ == null) {
        return devices_.get(index);  } else {
        return devicesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public java.util.List<? extends io.chirpstack.internal.RelayDeviceOrBuilder> 
         getDevicesOrBuilderList() {
      if (devicesBuilder_ != null) {
        return devicesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(devices_);
      }
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public io.chirpstack.internal.RelayDevice.Builder addDevicesBuilder() {
      return getDevicesFieldBuilder().addBuilder(
          io.chirpstack.internal.RelayDevice.getDefaultInstance());
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public io.chirpstack.internal.RelayDevice.Builder addDevicesBuilder(
        int index) {
      return getDevicesFieldBuilder().addBuilder(
          index, io.chirpstack.internal.RelayDevice.getDefaultInstance());
    }
    /**
     * <pre>
     * Devices provisioned on the relay.
     * </pre>
     *
     * <code>repeated .internal.RelayDevice devices = 1;</code>
     */
    public java.util.List<io.chirpstack.internal.RelayDevice.Builder> 
         getDevicesBuilderList() {
      return getDevicesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.chirpstack.internal.RelayDevice, io.chirpstack.internal.RelayDevice.Builder, io.chirpstack.internal.RelayDeviceOrBuilder> 
        getDevicesFieldBuilder() {
      if (devicesBuilder_ == null) {
        devicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.chirpstack.internal.RelayDevice, io.chirpstack.internal.RelayDevice.Builder, io.chirpstack.internal.RelayDeviceOrBuilder>(
                devices_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        devices_ = null;
      }
      return devicesBuilder_;
    }

    private java.util.List<io.chirpstack.internal.RelayFilter> filters_ =
      java.util.Collections.emptyList();
    private void ensureFiltersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        filters_ = new java.util.ArrayList<io.chirpstack.internal.RelayFilter>(filters_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.chirpstack.internal.RelayFilter, io.chirpstack.internal.RelayFilter.Builder, io.chirpstack.internal.RelayFilterOrBuilder> filtersBuilder_;

    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public java.util.List<io.chirpstack.internal.RelayFilter> getFiltersList() {
      if (filtersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(filters_);
      } else {
        return filtersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public int getFiltersCount() {
      if (filtersBuilder_ == null) {
        return filters_.size();
      } else {
        return filtersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public io.chirpstack.internal.RelayFilter getFilters(int index) {
      if (filtersBuilder_ == null) {
        return filters_.get(index);
      } else {
        return filtersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder setFilters(
        int index, io.chirpstack.internal.RelayFilter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.set(index, value);
        onChanged();
      } else {
        filtersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder setFilters(
        int index, io.chirpstack.internal.RelayFilter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.set(index, builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder addFilters(io.chirpstack.internal.RelayFilter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.add(value);
        onChanged();
      } else {
        filtersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder addFilters(
        int index, io.chirpstack.internal.RelayFilter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.add(index, value);
        onChanged();
      } else {
        filtersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder addFilters(
        io.chirpstack.internal.RelayFilter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.add(builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder addFilters(
        int index, io.chirpstack.internal.RelayFilter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.add(index, builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder addAllFilters(
        java.lang.Iterable<? extends io.chirpstack.internal.RelayFilter> values) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, filters_);
        onChanged();
      } else {
        filtersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder clearFilters() {
      if (filtersBuilder_ == null) {
        filters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        filtersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public Builder removeFilters(int index) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.remove(index);
        onChanged();
      } else {
        filtersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public io.chirpstack.internal.RelayFilter.Builder getFiltersBuilder(
        int index) {
      return getFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public io.chirpstack.internal.RelayFilterOrBuilder getFiltersOrBuilder(
        int index) {
      if (filtersBuilder_ == null) {
        return filters_.get(index);  } else {
        return filtersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public java.util.List<? extends io.chirpstack.internal.RelayFilterOrBuilder> 
         getFiltersOrBuilderList() {
      if (filtersBuilder_ != null) {
        return filtersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(filters_);
      }
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public io.chirpstack.internal.RelayFilter.Builder addFiltersBuilder() {
      return getFiltersFieldBuilder().addBuilder(
          io.chirpstack.internal.RelayFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public io.chirpstack.internal.RelayFilter.Builder addFiltersBuilder(
        int index) {
      return getFiltersFieldBuilder().addBuilder(
          index, io.chirpstack.internal.RelayFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Filter list.
     * </pre>
     *
     * <code>repeated .internal.RelayFilter filters = 2;</code>
     */
    public java.util.List<io.chirpstack.internal.RelayFilter.Builder> 
         getFiltersBuilderList() {
      return getFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.chirpstack.internal.RelayFilter, io.chirpstack.internal.RelayFilter.Builder, io.chirpstack.internal.RelayFilterOrBuilder> 
        getFiltersFieldBuilder() {
      if (filtersBuilder_ == null) {
        filtersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.chirpstack.internal.RelayFilter, io.chirpstack.internal.RelayFilter.Builder, io.chirpstack.internal.RelayFilterOrBuilder>(
                filters_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        filters_ = null;
      }
      return filtersBuilder_;
    }

    private boolean enabled_ ;
    /**
     * <pre>
     * Relay is enabled.
     * </pre>
     *
     * <code>bool enabled = 3;</code>
     * @return The enabled.
     */
    @java.lang.Override
    public boolean getEnabled() {
      return enabled_;
    }
    /**
     * <pre>
     * Relay is enabled.
     * </pre>
     *
     * <code>bool enabled = 3;</code>
     * @param value The enabled to set.
     * @return This builder for chaining.
     */
    public Builder setEnabled(boolean value) {

      enabled_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Relay is enabled.
     * </pre>
     *
     * <code>bool enabled = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnabled() {
      bitField0_ = (bitField0_ & ~0x00000004);
      enabled_ = false;
      onChanged();
      return this;
    }

    private int cadPeriodicity_ ;
    /**
     * <pre>
     * CAD periodicity.
     * </pre>
     *
     * <code>uint32 cad_periodicity = 4;</code>
     * @return The cadPeriodicity.
     */
    @java.lang.Override
    public int getCadPeriodicity() {
      return cadPeriodicity_;
    }
    /**
     * <pre>
     * CAD periodicity.
     * </pre>
     *
     * <code>uint32 cad_periodicity = 4;</code>
     * @param value The cadPeriodicity to set.
     * @return This builder for chaining.
     */
    public Builder setCadPeriodicity(int value) {

      cadPeriodicity_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * CAD periodicity.
     * </pre>
     *
     * <code>uint32 cad_periodicity = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearCadPeriodicity() {
      bitField0_ = (bitField0_ & ~0x00000008);
      cadPeriodicity_ = 0;
      onChanged();
      return this;
    }

    private int defaultChannelIndex_ ;
    /**
     * <pre>
     * Default channel index.
     * </pre>
     *
     * <code>uint32 default_channel_index = 5;</code>
     * @return The defaultChannelIndex.
     */
    @java.lang.Override
    public int getDefaultChannelIndex() {
      return defaultChannelIndex_;
    }
    /**
     * <pre>
     * Default channel index.
     * </pre>
     *
     * <code>uint32 default_channel_index = 5;</code>
     * @param value The defaultChannelIndex to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultChannelIndex(int value) {

      defaultChannelIndex_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Default channel index.
     * </pre>
     *
     * <code>uint32 default_channel_index = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDefaultChannelIndex() {
      bitField0_ = (bitField0_ & ~0x00000010);
      defaultChannelIndex_ = 0;
      onChanged();
      return this;
    }

    private int secondChannelFreq_ ;
    /**
     * <pre>
     * Second channel freq.
     * </pre>
     *
     * <code>uint32 second_channel_freq = 6;</code>
     * @return The secondChannelFreq.
     */
    @java.lang.Override
    public int getSecondChannelFreq() {
      return secondChannelFreq_;
    }
    /**
     * <pre>
     * Second channel freq.
     * </pre>
     *
     * <code>uint32 second_channel_freq = 6;</code>
     * @param value The secondChannelFreq to set.
     * @return This builder for chaining.
     */
    public Builder setSecondChannelFreq(int value) {

      secondChannelFreq_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Second channel freq.
     * </pre>
     *
     * <code>uint32 second_channel_freq = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSecondChannelFreq() {
      bitField0_ = (bitField0_ & ~0x00000020);
      secondChannelFreq_ = 0;
      onChanged();
      return this;
    }

    private int secondChannelDr_ ;
    /**
     * <pre>
     * Second channel DR.
     * </pre>
     *
     * <code>uint32 second_channel_dr = 7;</code>
     * @return The secondChannelDr.
     */
    @java.lang.Override
    public int getSecondChannelDr() {
      return secondChannelDr_;
    }
    /**
     * <pre>
     * Second channel DR.
     * </pre>
     *
     * <code>uint32 second_channel_dr = 7;</code>
     * @param value The secondChannelDr to set.
     * @return This builder for chaining.
     */
    public Builder setSecondChannelDr(int value) {

      secondChannelDr_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Second channel DR.
     * </pre>
     *
     * <code>uint32 second_channel_dr = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSecondChannelDr() {
      bitField0_ = (bitField0_ & ~0x00000040);
      secondChannelDr_ = 0;
      onChanged();
      return this;
    }

    private int secondChannelAckOffset_ ;
    /**
     * <pre>
     * Second channel ACK offset.
     * </pre>
     *
     * <code>uint32 second_channel_ack_offset = 8;</code>
     * @return The secondChannelAckOffset.
     */
    @java.lang.Override
    public int getSecondChannelAckOffset() {
      return secondChannelAckOffset_;
    }
    /**
     * <pre>
     * Second channel ACK offset.
     * </pre>
     *
     * <code>uint32 second_channel_ack_offset = 8;</code>
     * @param value The secondChannelAckOffset to set.
     * @return This builder for chaining.
     */
    public Builder setSecondChannelAckOffset(int value) {

      secondChannelAckOffset_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Second channel ACK offset.
     * </pre>
     *
     * <code>uint32 second_channel_ack_offset = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSecondChannelAckOffset() {
      bitField0_ = (bitField0_ & ~0x00000080);
      secondChannelAckOffset_ = 0;
      onChanged();
      return this;
    }

    private int edActivationMode_ ;
    /**
     * <pre>
     * End-device activation mode.
     * </pre>
     *
     * <code>uint32 ed_activation_mode = 9;</code>
     * @return The edActivationMode.
     */
    @java.lang.Override
    public int getEdActivationMode() {
      return edActivationMode_;
    }
    /**
     * <pre>
     * End-device activation mode.
     * </pre>
     *
     * <code>uint32 ed_activation_mode = 9;</code>
     * @param value The edActivationMode to set.
     * @return This builder for chaining.
     */
    public Builder setEdActivationMode(int value) {

      edActivationMode_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * End-device activation mode.
     * </pre>
     *
     * <code>uint32 ed_activation_mode = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearEdActivationMode() {
      bitField0_ = (bitField0_ & ~0x00000100);
      edActivationMode_ = 0;
      onChanged();
      return this;
    }

    private int edSmartEnableLevel_ ;
    /**
     * <pre>
     * End-device smart-enable level.
     * </pre>
     *
     * <code>uint32 ed_smart_enable_level = 10;</code>
     * @return The edSmartEnableLevel.
     */
    @java.lang.Override
    public int getEdSmartEnableLevel() {
      return edSmartEnableLevel_;
    }
    /**
     * <pre>
     * End-device smart-enable level.
     * </pre>
     *
     * <code>uint32 ed_smart_enable_level = 10;</code>
     * @param value The edSmartEnableLevel to set.
     * @return This builder for chaining.
     */
    public Builder setEdSmartEnableLevel(int value) {

      edSmartEnableLevel_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * End-device smart-enable level.
     * </pre>
     *
     * <code>uint32 ed_smart_enable_level = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearEdSmartEnableLevel() {
      bitField0_ = (bitField0_ & ~0x00000200);
      edSmartEnableLevel_ = 0;
      onChanged();
      return this;
    }

    private int edBackOff_ ;
    /**
     * <pre>
     * End-device back-off.
     * </pre>
     *
     * <code>uint32 ed_back_off = 11;</code>
     * @return The edBackOff.
     */
    @java.lang.Override
    public int getEdBackOff() {
      return edBackOff_;
    }
    /**
     * <pre>
     * End-device back-off.
     * </pre>
     *
     * <code>uint32 ed_back_off = 11;</code>
     * @param value The edBackOff to set.
     * @return This builder for chaining.
     */
    public Builder setEdBackOff(int value) {

      edBackOff_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * End-device back-off.
     * </pre>
     *
     * <code>uint32 ed_back_off = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearEdBackOff() {
      bitField0_ = (bitField0_ & ~0x00000400);
      edBackOff_ = 0;
      onChanged();
      return this;
    }

    private int joinReqLimitReloadRate_ ;
    /**
     * <pre>
     * Join-request limit reload rate.
     * </pre>
     *
     * <code>uint32 join_req_limit_reload_rate = 12;</code>
     * @return The joinReqLimitReloadRate.
     */
    @java.lang.Override
    public int getJoinReqLimitReloadRate() {
      return joinReqLimitReloadRate_;
    }
    /**
     * <pre>
     * Join-request limit reload rate.
     * </pre>
     *
     * <code>uint32 join_req_limit_reload_rate = 12;</code>
     * @param value The joinReqLimitReloadRate to set.
     * @return This builder for chaining.
     */
    public Builder setJoinReqLimitReloadRate(int value) {

      joinReqLimitReloadRate_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join-request limit reload rate.
     * </pre>
     *
     * <code>uint32 join_req_limit_reload_rate = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearJoinReqLimitReloadRate() {
      bitField0_ = (bitField0_ & ~0x00000800);
      joinReqLimitReloadRate_ = 0;
      onChanged();
      return this;
    }

    private int notifyLimitReloadRate_ ;
    /**
     * <pre>
     * Notify limit reload rate.
     * </pre>
     *
     * <code>uint32 notify_limit_reload_rate = 13;</code>
     * @return The notifyLimitReloadRate.
     */
    @java.lang.Override
    public int getNotifyLimitReloadRate() {
      return notifyLimitReloadRate_;
    }
    /**
     * <pre>
     * Notify limit reload rate.
     * </pre>
     *
     * <code>uint32 notify_limit_reload_rate = 13;</code>
     * @param value The notifyLimitReloadRate to set.
     * @return This builder for chaining.
     */
    public Builder setNotifyLimitReloadRate(int value) {

      notifyLimitReloadRate_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Notify limit reload rate.
     * </pre>
     *
     * <code>uint32 notify_limit_reload_rate = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearNotifyLimitReloadRate() {
      bitField0_ = (bitField0_ & ~0x00001000);
      notifyLimitReloadRate_ = 0;
      onChanged();
      return this;
    }

    private int globalUplinkLimitReloadRate_ ;
    /**
     * <pre>
     * Global uplink limit reload rate.
     * </pre>
     *
     * <code>uint32 global_uplink_limit_reload_rate = 14;</code>
     * @return The globalUplinkLimitReloadRate.
     */
    @java.lang.Override
    public int getGlobalUplinkLimitReloadRate() {
      return globalUplinkLimitReloadRate_;
    }
    /**
     * <pre>
     * Global uplink limit reload rate.
     * </pre>
     *
     * <code>uint32 global_uplink_limit_reload_rate = 14;</code>
     * @param value The globalUplinkLimitReloadRate to set.
     * @return This builder for chaining.
     */
    public Builder setGlobalUplinkLimitReloadRate(int value) {

      globalUplinkLimitReloadRate_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Global uplink limit reload rate.
     * </pre>
     *
     * <code>uint32 global_uplink_limit_reload_rate = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearGlobalUplinkLimitReloadRate() {
      bitField0_ = (bitField0_ & ~0x00002000);
      globalUplinkLimitReloadRate_ = 0;
      onChanged();
      return this;
    }

    private int overallLimitReloadRate_ ;
    /**
     * <pre>
     * Overall limit reload rate.
     * </pre>
     *
     * <code>uint32 overall_limit_reload_rate = 15;</code>
     * @return The overallLimitReloadRate.
     */
    @java.lang.Override
    public int getOverallLimitReloadRate() {
      return overallLimitReloadRate_;
    }
    /**
     * <pre>
     * Overall limit reload rate.
     * </pre>
     *
     * <code>uint32 overall_limit_reload_rate = 15;</code>
     * @param value The overallLimitReloadRate to set.
     * @return This builder for chaining.
     */
    public Builder setOverallLimitReloadRate(int value) {

      overallLimitReloadRate_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Overall limit reload rate.
     * </pre>
     *
     * <code>uint32 overall_limit_reload_rate = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearOverallLimitReloadRate() {
      bitField0_ = (bitField0_ & ~0x00004000);
      overallLimitReloadRate_ = 0;
      onChanged();
      return this;
    }

    private int joinReqLimitBucketSize_ ;
    /**
     * <pre>
     * Join-request limit bucket size.
     * </pre>
     *
     * <code>uint32 join_req_limit_bucket_size = 16;</code>
     * @return The joinReqLimitBucketSize.
     */
    @java.lang.Override
    public int getJoinReqLimitBucketSize() {
      return joinReqLimitBucketSize_;
    }
    /**
     * <pre>
     * Join-request limit bucket size.
     * </pre>
     *
     * <code>uint32 join_req_limit_bucket_size = 16;</code>
     * @param value The joinReqLimitBucketSize to set.
     * @return This builder for chaining.
     */
    public Builder setJoinReqLimitBucketSize(int value) {

      joinReqLimitBucketSize_ = value;
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join-request limit bucket size.
     * </pre>
     *
     * <code>uint32 join_req_limit_bucket_size = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearJoinReqLimitBucketSize() {
      bitField0_ = (bitField0_ & ~0x00008000);
      joinReqLimitBucketSize_ = 0;
      onChanged();
      return this;
    }

    private int notifyLimitBucketSize_ ;
    /**
     * <pre>
     * Notify limit bucket size.
     * </pre>
     *
     * <code>uint32 notify_limit_bucket_size = 17;</code>
     * @return The notifyLimitBucketSize.
     */
    @java.lang.Override
    public int getNotifyLimitBucketSize() {
      return notifyLimitBucketSize_;
    }
    /**
     * <pre>
     * Notify limit bucket size.
     * </pre>
     *
     * <code>uint32 notify_limit_bucket_size = 17;</code>
     * @param value The notifyLimitBucketSize to set.
     * @return This builder for chaining.
     */
    public Builder setNotifyLimitBucketSize(int value) {

      notifyLimitBucketSize_ = value;
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Notify limit bucket size.
     * </pre>
     *
     * <code>uint32 notify_limit_bucket_size = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearNotifyLimitBucketSize() {
      bitField0_ = (bitField0_ & ~0x00010000);
      notifyLimitBucketSize_ = 0;
      onChanged();
      return this;
    }

    private int globalUplinkLimitBucketSize_ ;
    /**
     * <pre>
     * Global uplink limit bucket size.
     * </pre>
     *
     * <code>uint32 global_uplink_limit_bucket_size = 18;</code>
     * @return The globalUplinkLimitBucketSize.
     */
    @java.lang.Override
    public int getGlobalUplinkLimitBucketSize() {
      return globalUplinkLimitBucketSize_;
    }
    /**
     * <pre>
     * Global uplink limit bucket size.
     * </pre>
     *
     * <code>uint32 global_uplink_limit_bucket_size = 18;</code>
     * @param value The globalUplinkLimitBucketSize to set.
     * @return This builder for chaining.
     */
    public Builder setGlobalUplinkLimitBucketSize(int value) {

      globalUplinkLimitBucketSize_ = value;
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Global uplink limit bucket size.
     * </pre>
     *
     * <code>uint32 global_uplink_limit_bucket_size = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearGlobalUplinkLimitBucketSize() {
      bitField0_ = (bitField0_ & ~0x00020000);
      globalUplinkLimitBucketSize_ = 0;
      onChanged();
      return this;
    }

    private int overallLimitBucketSize_ ;
    /**
     * <pre>
     * Overall limit bucket size.
     * </pre>
     *
     * <code>uint32 overall_limit_bucket_size = 19;</code>
     * @return The overallLimitBucketSize.
     */
    @java.lang.Override
    public int getOverallLimitBucketSize() {
      return overallLimitBucketSize_;
    }
    /**
     * <pre>
     * Overall limit bucket size.
     * </pre>
     *
     * <code>uint32 overall_limit_bucket_size = 19;</code>
     * @param value The overallLimitBucketSize to set.
     * @return This builder for chaining.
     */
    public Builder setOverallLimitBucketSize(int value) {

      overallLimitBucketSize_ = value;
      bitField0_ |= 0x00040000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Overall limit bucket size.
     * </pre>
     *
     * <code>uint32 overall_limit_bucket_size = 19;</code>
     * @return This builder for chaining.
     */
    public Builder clearOverallLimitBucketSize() {
      bitField0_ = (bitField0_ & ~0x00040000);
      overallLimitBucketSize_ = 0;
      onChanged();
      return this;
    }

    private boolean edRelayOnly_ ;
    /**
     * <pre>
     * End-device must communicate through relay only.
     * This is stored in the device-session as we need to validate on retrieving
     * the device-session.
     * </pre>
     *
     * <code>bool ed_relay_only = 20;</code>
     * @return The edRelayOnly.
     */
    @java.lang.Override
    public boolean getEdRelayOnly() {
      return edRelayOnly_;
    }
    /**
     * <pre>
     * End-device must communicate through relay only.
     * This is stored in the device-session as we need to validate on retrieving
     * the device-session.
     * </pre>
     *
     * <code>bool ed_relay_only = 20;</code>
     * @param value The edRelayOnly to set.
     * @return This builder for chaining.
     */
    public Builder setEdRelayOnly(boolean value) {

      edRelayOnly_ = value;
      bitField0_ |= 0x00080000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * End-device must communicate through relay only.
     * This is stored in the device-session as we need to validate on retrieving
     * the device-session.
     * </pre>
     *
     * <code>bool ed_relay_only = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearEdRelayOnly() {
      bitField0_ = (bitField0_ & ~0x00080000);
      edRelayOnly_ = false;
      onChanged();
      return this;
    }

    private int wFCnt_ ;
    /**
     * <pre>
     * End-device WFCnt.
     * This holds the last known WFCnt value. ChirpStack will periodically read
     * this value from the Relay.
     * </pre>
     *
     * <code>uint32 w_f_cnt = 21;</code>
     * @return The wFCnt.
     */
    @java.lang.Override
    public int getWFCnt() {
      return wFCnt_;
    }
    /**
     * <pre>
     * End-device WFCnt.
     * This holds the last known WFCnt value. ChirpStack will periodically read
     * this value from the Relay.
     * </pre>
     *
     * <code>uint32 w_f_cnt = 21;</code>
     * @param value The wFCnt to set.
     * @return This builder for chaining.
     */
    public Builder setWFCnt(int value) {

      wFCnt_ = value;
      bitField0_ |= 0x00100000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * End-device WFCnt.
     * This holds the last known WFCnt value. ChirpStack will periodically read
     * this value from the Relay.
     * </pre>
     *
     * <code>uint32 w_f_cnt = 21;</code>
     * @return This builder for chaining.
     */
    public Builder clearWFCnt() {
      bitField0_ = (bitField0_ & ~0x00100000);
      wFCnt_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:internal.Relay)
  }

  // @@protoc_insertion_point(class_scope:internal.Relay)
  private static final io.chirpstack.internal.Relay DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.chirpstack.internal.Relay();
  }

  public static io.chirpstack.internal.Relay getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Relay>
      PARSER = new com.google.protobuf.AbstractParser<Relay>() {
    @java.lang.Override
    public Relay parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Relay> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Relay> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.chirpstack.internal.Relay getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

