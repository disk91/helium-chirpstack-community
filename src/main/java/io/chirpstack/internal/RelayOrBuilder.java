// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/internal.proto

// Protobuf Java Version: 3.25.1
package io.chirpstack.internal;

public interface RelayOrBuilder extends
    // @@protoc_insertion_point(interface_extends:internal.Relay)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  java.util.List<io.chirpstack.internal.RelayDevice> 
      getDevicesList();
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  io.chirpstack.internal.RelayDevice getDevices(int index);
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  int getDevicesCount();
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  java.util.List<? extends io.chirpstack.internal.RelayDeviceOrBuilder> 
      getDevicesOrBuilderList();
  /**
   * <pre>
   * Devices provisioned on the relay.
   * </pre>
   *
   * <code>repeated .internal.RelayDevice devices = 1;</code>
   */
  io.chirpstack.internal.RelayDeviceOrBuilder getDevicesOrBuilder(
      int index);

  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  java.util.List<io.chirpstack.internal.RelayFilter> 
      getFiltersList();
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  io.chirpstack.internal.RelayFilter getFilters(int index);
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  int getFiltersCount();
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  java.util.List<? extends io.chirpstack.internal.RelayFilterOrBuilder> 
      getFiltersOrBuilderList();
  /**
   * <pre>
   * Filter list.
   * </pre>
   *
   * <code>repeated .internal.RelayFilter filters = 2;</code>
   */
  io.chirpstack.internal.RelayFilterOrBuilder getFiltersOrBuilder(
      int index);

  /**
   * <pre>
   * Relay is enabled.
   * </pre>
   *
   * <code>bool enabled = 3;</code>
   * @return The enabled.
   */
  boolean getEnabled();

  /**
   * <pre>
   * CAD periodicity.
   * </pre>
   *
   * <code>uint32 cad_periodicity = 4;</code>
   * @return The cadPeriodicity.
   */
  int getCadPeriodicity();

  /**
   * <pre>
   * Default channel index.
   * </pre>
   *
   * <code>uint32 default_channel_index = 5;</code>
   * @return The defaultChannelIndex.
   */
  int getDefaultChannelIndex();

  /**
   * <pre>
   * Second channel freq.
   * </pre>
   *
   * <code>uint32 second_channel_freq = 6;</code>
   * @return The secondChannelFreq.
   */
  int getSecondChannelFreq();

  /**
   * <pre>
   * Second channel DR.
   * </pre>
   *
   * <code>uint32 second_channel_dr = 7;</code>
   * @return The secondChannelDr.
   */
  int getSecondChannelDr();

  /**
   * <pre>
   * Second channel ACK offset.
   * </pre>
   *
   * <code>uint32 second_channel_ack_offset = 8;</code>
   * @return The secondChannelAckOffset.
   */
  int getSecondChannelAckOffset();

  /**
   * <pre>
   * End-device activation mode.
   * </pre>
   *
   * <code>uint32 ed_activation_mode = 9;</code>
   * @return The edActivationMode.
   */
  int getEdActivationMode();

  /**
   * <pre>
   * End-device smart-enable level.
   * </pre>
   *
   * <code>uint32 ed_smart_enable_level = 10;</code>
   * @return The edSmartEnableLevel.
   */
  int getEdSmartEnableLevel();

  /**
   * <pre>
   * End-device back-off.
   * </pre>
   *
   * <code>uint32 ed_back_off = 11;</code>
   * @return The edBackOff.
   */
  int getEdBackOff();

  /**
   * <pre>
   * Join-request limit reload rate.
   * </pre>
   *
   * <code>uint32 join_req_limit_reload_rate = 12;</code>
   * @return The joinReqLimitReloadRate.
   */
  int getJoinReqLimitReloadRate();

  /**
   * <pre>
   * Notify limit reload rate.
   * </pre>
   *
   * <code>uint32 notify_limit_reload_rate = 13;</code>
   * @return The notifyLimitReloadRate.
   */
  int getNotifyLimitReloadRate();

  /**
   * <pre>
   * Global uplink limit reload rate.
   * </pre>
   *
   * <code>uint32 global_uplink_limit_reload_rate = 14;</code>
   * @return The globalUplinkLimitReloadRate.
   */
  int getGlobalUplinkLimitReloadRate();

  /**
   * <pre>
   * Overall limit reload rate.
   * </pre>
   *
   * <code>uint32 overall_limit_reload_rate = 15;</code>
   * @return The overallLimitReloadRate.
   */
  int getOverallLimitReloadRate();

  /**
   * <pre>
   * Join-request limit bucket size.
   * </pre>
   *
   * <code>uint32 join_req_limit_bucket_size = 16;</code>
   * @return The joinReqLimitBucketSize.
   */
  int getJoinReqLimitBucketSize();

  /**
   * <pre>
   * Notify limit bucket size.
   * </pre>
   *
   * <code>uint32 notify_limit_bucket_size = 17;</code>
   * @return The notifyLimitBucketSize.
   */
  int getNotifyLimitBucketSize();

  /**
   * <pre>
   * Global uplink limit bucket size.
   * </pre>
   *
   * <code>uint32 global_uplink_limit_bucket_size = 18;</code>
   * @return The globalUplinkLimitBucketSize.
   */
  int getGlobalUplinkLimitBucketSize();

  /**
   * <pre>
   * Overall limit bucket size.
   * </pre>
   *
   * <code>uint32 overall_limit_bucket_size = 19;</code>
   * @return The overallLimitBucketSize.
   */
  int getOverallLimitBucketSize();

  /**
   * <pre>
   * End-device must communicate through relay only.
   * This is stored in the device-session as we need to validate on retrieving
   * the device-session.
   * </pre>
   *
   * <code>bool ed_relay_only = 20;</code>
   * @return The edRelayOnly.
   */
  boolean getEdRelayOnly();

  /**
   * <pre>
   * End-device WFCnt.
   * This holds the last known WFCnt value. ChirpStack will periodically read
   * this value from the Relay.
   * </pre>
   *
   * <code>uint32 w_f_cnt = 21;</code>
   * @return The wFCnt.
   */
  int getWFCnt();
}
